//
// VidyoClientDispatcher.d.ts
//	VidyoClientAPI Declarations
//
//	This file is auto generated, do not edit this file
//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.
//

type onStatusCallback = (...args: any[]) => any;
declare module VidyoClientLib {

	export module VidyoClient {

		export enum VidyoCalendarConnectResult{
			'VIDYO_CALENDARCONNECTRESULT_Ok',
			'VIDYO_CALENDARCONNECTRESULT_NoService',
			'VIDYO_CALENDARCONNECTRESULT_ConnectionFailed',
			'VIDYO_CALENDARCONNECTRESULT_ConnectionLost',
			'VIDYO_CALENDARCONNECTRESULT_ConnectionTimeout',
			'VIDYO_CALENDARCONNECTRESULT_InvalidCredentials',
			'VIDYO_CALENDARCONNECTRESULT_InvalidCalendarId',
			'VIDYO_CALENDARCONNECTRESULT_Disconnected',
			'VIDYO_CALENDARCONNECTRESULT_GeneralError'
		}
		export enum VidyoCalendarServiceStatus{
			'VIDYO_CALENDARSERVICESTATUS_Init',
			'VIDYO_CALENDARSERVICESTATUS_Loaded',
			'VIDYO_CALENDARSERVICESTATUS_LoadError',
			'VIDYO_CALENDARSERVICESTATUS_InvalidVersion',
			'VIDYO_CALENDARSERVICESTATUS_DllNotFound',
			'VIDYO_CALENDARSERVICESTATUS_ApiProcError',
			'VIDYO_CALENDARSERVICESTATUS_PluginSvcNotInstalled',
			'VIDYO_CALENDARSERVICESTATUS_PluginSvcNotActive',
			'VIDYO_CALENDARSERVICESTATUS_PluginSvcAuthRequired',
			'VIDYO_CALENDARSERVICESTATUS_Unloaded'
		}
		export enum VidyoFormFieldTextWrapMode{
			'VIDYO_FORMFIELDTEXTWRAPMODE_Off',
			'VIDYO_FORMFIELDTEXTWRAPMODE_Virtual',
			'VIDYO_FORMFIELDTEXTWRAPMODE_Physical'
		}
		export enum VidyoFormFieldType{
			'VIDYO_FORMFIELDTYPE_Text',
			'VIDYO_FORMFIELDTYPE_TextArea',
			'VIDYO_FORMFIELDTYPE_Password',
			'VIDYO_FORMFIELDTYPE_Checkbox',
			'VIDYO_FORMFIELDTYPE_Radio',
			'VIDYO_FORMFIELDTYPE_Select'
		}
		export enum VidyoCalendarCapabilityKey{
			'VIDYO_CALENDARCAPABILITYKEY_SSO',
			'VIDYO_CALENDARCAPABILITYKEY_WebUrl',
			'VIDYO_CALENDARCAPABILITYKEY_WebUrlAutodiscovery',
			'VIDYO_CALENDARCAPABILITYKEY_Username',
			'VIDYO_CALENDARCAPABILITYKEY_Password'
		}
		export enum VidyoCalendarCreateCode{
			'VIDYO_CALENDARCREATECODE_Ok',
			'VIDYO_CALENDARCREATECODE_SvcNotRegistered',
			'VIDYO_CALENDARCREATECODE_LibraryLoadFailed',
			'VIDYO_CALENDARCREATECODE_ExistingInstance',
			'VIDYO_CALENDARCREATECODE_CalendarPluginConstructFailure',
			'VIDYO_CALENDARCREATECODE_CalendarPluginInvalidCredentials',
			'VIDYO_CALENDARCREATECODE_CalendarPluginInvalidCalendarId',
			'VIDYO_CALENDARCREATECODE_VidyoCalendarConstructFailure',
			'VIDYO_CALENDARCREATECODE_VidyoCalendarDestroyed',
			'VIDYO_CALENDARCREATECODE_GeneralError'
		}
		export enum VidyoCalendarState{
			'VIDYO_CALENDARSTATE_Unavailable',
			'VIDYO_CALENDARSTATE_Initialized',
			'VIDYO_CALENDARSTATE_Connecting',
			'VIDYO_CALENDARSTATE_Connected',
			'VIDYO_CALENDARSTATE_Disconnecting',
			'VIDYO_CALENDARSTATE_Disconnected'
		}
		export enum VidyoMeetingSearchResult{
			'VIDYO_MEETINGSEARCHRESULT_Ok',
			'VIDYO_MEETINGSEARCHRESULT_Processing',
			'VIDYO_MEETINGSEARCHRESULT_NoRecords',
			'VIDYO_MEETINGSEARCHRESULT_InvalidIndex',
			'VIDYO_MEETINGSEARCHRESULT_InvalidDateTimeRange',
			'VIDYO_MEETINGSEARCHRESULT_NoResponse',
			'VIDYO_MEETINGSEARCHRESULT_NotConnected',
			'VIDYO_MEETINGSEARCHRESULT_PluginError',
			'VIDYO_MEETINGSEARCHRESULT_MiscLocalError',
			'VIDYO_MEETINGSEARCHRESULT_MiscRemoteError'
		}
		export enum VidyoConnectorBaseTransportType{
			'VIDYO_CONNECTORBASETRANSPORTTYPE_TLS',
			'VIDYO_CONNECTORBASETRANSPORTTYPE_TCP',
			'VIDYO_CONNECTORBASETRANSPORTTYPE_UDP'
		}
		export enum VidyoConnectorDisconnectReason{
			'VIDYO_CONNECTORDISCONNECTREASON_Disconnected',
			'VIDYO_CONNECTORDISCONNECTREASON_ConnectionLost',
			'VIDYO_CONNECTORDISCONNECTREASON_ConnectionTimeout',
			'VIDYO_CONNECTORDISCONNECTREASON_NoResponse',
			'VIDYO_CONNECTORDISCONNECTREASON_Terminated',
			'VIDYO_CONNECTORDISCONNECTREASON_MiscLocalError',
			'VIDYO_CONNECTORDISCONNECTREASON_MiscRemoteError',
			'VIDYO_CONNECTORDISCONNECTREASON_MiscError'
		}
		export enum VidyoConnectorFailReason{
			'VIDYO_CONNECTORFAILREASON_ConnectionFailed',
			'VIDYO_CONNECTORFAILREASON_ConnectionLost',
			'VIDYO_CONNECTORFAILREASON_ConnectionTimeout',
			'VIDYO_CONNECTORFAILREASON_NoResponse',
			'VIDYO_CONNECTORFAILREASON_Terminated',
			'VIDYO_CONNECTORFAILREASON_InvalidToken',
			'VIDYO_CONNECTORFAILREASON_UnableToCreateResource',
			'VIDYO_CONNECTORFAILREASON_NoResponseFromResource',
			'VIDYO_CONNECTORFAILREASON_InvalidResourceId',
			'VIDYO_CONNECTORFAILREASON_ResourceFull',
			'VIDYO_CONNECTORFAILREASON_NotMember',
			'VIDYO_CONNECTORFAILREASON_Banned',
			'VIDYO_CONNECTORFAILREASON_MediaNotEnabled',
			'VIDYO_CONNECTORFAILREASON_MediaFailed',
			'VIDYO_CONNECTORFAILREASON_MiscLocalError',
			'VIDYO_CONNECTORFAILREASON_MiscRemoteError',
			'VIDYO_CONNECTORFAILREASON_MiscError',
			'VIDYO_CONNECTORFAILREASON_InvalidDisplayNameLength'
		}
		export enum VidyoConnectorMode{
			'VIDYO_CONNECTORMODE_Default',
			'VIDYO_CONNECTORMODE_Foreground',
			'VIDYO_CONNECTORMODE_Background'
		}
		export enum VidyoConnectorState{
			'VIDYO_CONNECTORSTATE_Idle',
			'VIDYO_CONNECTORSTATE_Ready',
			'VIDYO_CONNECTORSTATE_EstablishingConnection',
			'VIDYO_CONNECTORSTATE_FindingResource',
			'VIDYO_CONNECTORSTATE_ConnectingToResource',
			'VIDYO_CONNECTORSTATE_EnablingMedia',
			'VIDYO_CONNECTORSTATE_Connected'
		}
		export enum VidyoConnectorTradeOffProfile{
			'VIDYO_CONNECTORTRADEOFFPROFILE_High',
			'VIDYO_CONNECTORTRADEOFFPROFILE_Medium',
			'VIDYO_CONNECTORTRADEOFFPROFILE_Low'
		}
		export enum VidyoConnectorViewStyle{
			'VIDYO_CONNECTORVIEWSTYLE_Default',
			'VIDYO_CONNECTORVIEWSTYLE_Tiles'
		}
		export enum VidyoGatewayDisconnectReason{
			'VIDYO_GATEWAYDISCONNECTREASON_Disconnected',
			'VIDYO_GATEWAYDISCONNECTREASON_ConnectionLost',
			'VIDYO_GATEWAYDISCONNECTREASON_ConnectionTimeout',
			'VIDYO_GATEWAYDISCONNECTREASON_NoResponse',
			'VIDYO_GATEWAYDISCONNECTREASON_Terminated',
			'VIDYO_GATEWAYDISCONNECTREASON_MiscLocalError',
			'VIDYO_GATEWAYDISCONNECTREASON_MiscRemoteError',
			'VIDYO_GATEWAYDISCONNECTREASON_MiscError'
		}
		export enum VidyoGatewayFailReason{
			'VIDYO_GATEWAYFAILREASON_ConnectionFailed',
			'VIDYO_GATEWAYFAILREASON_ConnectionLost',
			'VIDYO_GATEWAYFAILREASON_ConnectionTimeout',
			'VIDYO_GATEWAYFAILREASON_NoResponse',
			'VIDYO_GATEWAYFAILREASON_Terminated',
			'VIDYO_GATEWAYFAILREASON_InvalidToken',
			'VIDYO_GATEWAYFAILREASON_UnableToCreateResource',
			'VIDYO_GATEWAYFAILREASON_NoResponseFromResource',
			'VIDYO_GATEWAYFAILREASON_InvalidResourceId',
			'VIDYO_GATEWAYFAILREASON_ResourceFull',
			'VIDYO_GATEWAYFAILREASON_NotMember',
			'VIDYO_GATEWAYFAILREASON_Banned',
			'VIDYO_GATEWAYFAILREASON_MediaNotEnabled',
			'VIDYO_GATEWAYFAILREASON_MediaFailed',
			'VIDYO_GATEWAYFAILREASON_MiscLocalError',
			'VIDYO_GATEWAYFAILREASON_MiscRemoteError',
			'VIDYO_GATEWAYFAILREASON_MiscError'
		}
		export enum VidyoGatewayState{
			'VIDYO_GATEWAYSTATE_Idle',
			'VIDYO_GATEWAYSTATE_EstablishingConnection',
			'VIDYO_GATEWAYSTATE_FindingResource',
			'VIDYO_GATEWAYSTATE_ConnectingToResource',
			'VIDYO_GATEWAYSTATE_EnablingMedia',
			'VIDYO_GATEWAYSTATE_Connected'
		}
		export enum VidyoDeviceAudioSignalType{
			'VIDYO_DEVICEAUDIOSIGNALTYPE_Voice',
			'VIDYO_DEVICEAUDIOSIGNALTYPE_Unprocessed'
		}
		export enum VidyoDeviceState{
			'VIDYO_DEVICESTATE_Added',
			'VIDYO_DEVICESTATE_Removed',
			'VIDYO_DEVICESTATE_Started',
			'VIDYO_DEVICESTATE_Stopped',
			'VIDYO_DEVICESTATE_Suspended',
			'VIDYO_DEVICESTATE_Unsuspended',
			'VIDYO_DEVICESTATE_InUse',
			'VIDYO_DEVICESTATE_Available',
			'VIDYO_DEVICESTATE_Paused',
			'VIDYO_DEVICESTATE_Resumed',
			'VIDYO_DEVICESTATE_Controllable',
			'VIDYO_DEVICESTATE_NotControllable',
			'VIDYO_DEVICESTATE_DefaultChanged',
			'VIDYO_DEVICESTATE_ConfigureSuccess',
			'VIDYO_DEVICESTATE_ConfigureError',
			'VIDYO_DEVICESTATE_Error'
		}
		export enum VidyoDeviceType{
			'VIDYO_DEVICETYPE_LocalCamera',
			'VIDYO_DEVICETYPE_LocalMicrophone',
			'VIDYO_DEVICETYPE_LocalMonitor',
			'VIDYO_DEVICETYPE_LocalWindowShare',
			'VIDYO_DEVICETYPE_LocalSpeaker',
			'VIDYO_DEVICETYPE_LocalRenderer',
			'VIDYO_DEVICETYPE_RemoteCamera',
			'VIDYO_DEVICETYPE_RemoteMicrophone',
			'VIDYO_DEVICETYPE_RemoteWindowShare',
			'VIDYO_DEVICETYPE_RemoteSpeaker',
			'VIDYO_DEVICETYPE_RemoteRenderer'
		}
		export enum VidyoLocalCameraPosition{
			'VIDYO_LOCALCAMERAPOSITION_Unknown',
			'VIDYO_LOCALCAMERAPOSITION_Front',
			'VIDYO_LOCALCAMERAPOSITION_Back'
		}
		export enum VidyoLocalCameraTradeOffProfile{
			'VIDYO_LOCALCAMERATRADEOFFPROFILE_High',
			'VIDYO_LOCALCAMERATRADEOFFPROFILE_Medium',
			'VIDYO_LOCALCAMERATRADEOFFPROFILE_Low'
		}
		export enum VidyoVoiceProcessingMode{
			'VIDYO_VOICEPROCESSINGMODE_Default',
			'VIDYO_VOICEPROCESSINGMODE_Vidyo',
			'VIDYO_VOICEPROCESSINGMODE_Platform'
		}
		export enum VidyoLocalMonitorState{
			'VIDYO_LOCALMONITORSTATE_Ok',
			'VIDYO_LOCALMONITORSTATE_NotVisible',
			'VIDYO_LOCALMONITORSTATE_MiscError'
		}
		export enum VidyoLocalRendererBorderStyle{
			'VIDYO_LOCALRENDERERBORDERSTYLE_None',
			'VIDYO_LOCALRENDERERBORDERSTYLE_Same',
			'VIDYO_LOCALRENDERERBORDERSTYLE_Highlight',
			'VIDYO_LOCALRENDERERBORDERSTYLE_Flash'
		}
		export enum VidyoLocalRendererPipPosition{
			'VIDYO_LOCALRENDERERPIPPOSITION_MIN',
			'VIDYO_LOCALRENDERERPIPPOSITION_CENTER',
			'VIDYO_LOCALRENDERERPIPPOSITION_MAX'
		}
		export enum VidyoLocalRendererViewStyle{
			'VIDYO_LOCALRENDERERVIEWSTYLE_Default',
			'VIDYO_LOCALRENDERERVIEWSTYLE_Tiles',
			'VIDYO_LOCALRENDERERVIEWSTYLE_TilesWithRemoteCameraControlV2'
		}
		export enum VidyoLocalWindowShareState{
			'VIDYO_LOCALWINDOWSHARESTATE_Ok',
			'VIDYO_LOCALWINDOWSHARESTATE_NotVisible',
			'VIDYO_LOCALWINDOWSHARESTATE_Minimized',
			'VIDYO_LOCALWINDOWSHARESTATE_Closed',
			'VIDYO_LOCALWINDOWSHARESTATE_MiscError'
		}
		export enum VidyoRemoteCameraMode{
			'VIDYO_REMOTECAMERAMODE_Dynamic',
			'VIDYO_REMOTECAMERAMODE_Static'
		}
		export enum VidyoRemoteCameraPosition{
			'VIDYO_REMOTECAMERAPOSITION_Unknown',
			'VIDYO_REMOTECAMERAPOSITION_Front',
			'VIDYO_REMOTECAMERAPOSITION_Back'
		}
		export enum VidyoRemoteMicrophoneMode{
			'VIDYO_REMOTEMICROPHONEMODE_Dynamic',
			'VIDYO_REMOTEMICROPHONEMODE_Static'
		}
		export enum VidyoVirtualWindowShareState{
			'VIDYO_VIRTUALWINDOWSHARESTATE_Ok',
			'VIDYO_VIRTUALWINDOWSHARESTATE_NotVisible',
			'VIDYO_VIRTUALWINDOWSHARESTATE_Minimized',
			'VIDYO_VIRTUALWINDOWSHARESTATE_Closed',
			'VIDYO_VIRTUALWINDOWSHARESTATE_MiscError'
		}
		export enum VidyoApplicationDownloadFailedReason{
			'VIDYO_APPLICATION_DOWNLOADFAILEDREASON_WebProxyAuthenticationRequired',
			'VIDYO_APPLICATION_DOWNLOADFAILEDREASON_MiscError'
		}
		export enum VidyoCallEndReason{
			'VIDYO_CALLENDREASON_Ended',
			'VIDYO_CALLENDREASON_ConnectionFailed',
			'VIDYO_CALLENDREASON_ConnectionLost',
			'VIDYO_CALLENDREASON_ParticipantBusy',
			'VIDYO_CALLENDREASON_ParticipantRejected',
			'VIDYO_CALLENDREASON_ParticipantEnded',
			'VIDYO_CALLENDREASON_MiscError'
		}
		export enum VidyoCallInitiatedResult{
			'VIDYO_CALLINITIATEDRESULT_OK',
			'VIDYO_CALLINITIATEDRESULT_Cancelled',
			'VIDYO_CALLINITIATEDRESULT_NoResponse',
			'VIDYO_CALLINITIATEDRESULT_UnknownParticipant',
			'VIDYO_CALLINITIATEDRESULT_MiscLocalError',
			'VIDYO_CALLINITIATEDRESULT_MiscRemoteError'
		}
		export enum VidyoChatMessageSenderType{
			'VIDYO_CHATMESSAGESENDERTYPE_User',
			'VIDYO_CHATMESSAGESENDERTYPE_Room',
			'VIDYO_CHATMESSAGESENDERTYPE_System',
			'VIDYO_CHATMESSAGESENDERTYPE_None'
		}
		export enum VidyoChatMessageType{
			'VIDYO_CHATMESSAGETYPE_Chat',
			'VIDYO_CHATMESSAGETYPE_MediaStart',
			'VIDYO_CHATMESSAGETYPE_MediaStop'
		}
		export enum VidyoChatMessageTypingIndication{
			'VIDYO_CHATMESSAGETYPINGINDICATION_Active',
			'VIDYO_CHATMESSAGETYPINGINDICATION_Composing',
			'VIDYO_CHATMESSAGETYPINGINDICATION_Gone',
			'VIDYO_CHATMESSAGETYPINGINDICATION_Inactive',
			'VIDYO_CHATMESSAGETYPINGINDICATION_Paused',
			'VIDYO_CHATMESSAGETYPINGINDICATION_None'
		}
		export enum VidyoContactPresenceState{
			'VIDYO_CONTACTPRESENCESTATE_Unavailable',
			'VIDYO_CONTACTPRESENCESTATE_DoNotDisturb',
			'VIDYO_CONTACTPRESENCESTATE_ExtendedAway',
			'VIDYO_CONTACTPRESENCESTATE_Away',
			'VIDYO_CONTACTPRESENCESTATE_Available',
			'VIDYO_CONTACTPRESENCESTATE_InterestedInChat'
		}
		export enum VidyoContactSubscriptionState{
			'VIDYO_CONTACTSUBSCRIPTIONSTATE_Unavailable',
			'VIDYO_CONTACTSUBSCRIPTIONSTATE_NotSubscribed',
			'VIDYO_CONTACTSUBSCRIPTIONSTATE_Preapproved',
			'VIDYO_CONTACTSUBSCRIPTIONSTATE_AwaitingApproval',
			'VIDYO_CONTACTSUBSCRIPTIONSTATE_Subscribed'
		}
		export enum VidyoContactInfoPresenceState{
			'VIDYO_CONTACTINFOPRESENCESTATE_Unavailable',
			'VIDYO_CONTACTINFOPRESENCESTATE_DoNotDisturb',
			'VIDYO_CONTACTINFOPRESENCESTATE_ExtendedAway',
			'VIDYO_CONTACTINFOPRESENCESTATE_Away',
			'VIDYO_CONTACTINFOPRESENCESTATE_Available',
			'VIDYO_CONTACTINFOPRESENCESTATE_InterestedInChat'
		}
		export enum VidyoClientAppLogLevel{
			'VIDYO_CLIENTAPPLOGLEVEL_Info',
			'VIDYO_CLIENTAPPLOGLEVEL_Debug',
			'VIDYO_CLIENTAPPLOGLEVEL_Warning',
			'VIDYO_CLIENTAPPLOGLEVEL_Error'
		}
		export enum VidyoEndpointBaseTransportType{
			'VIDYO_ENDPOINTBASETRANSPORTTYPE_TLS',
			'VIDYO_ENDPOINTBASETRANSPORTTYPE_TCP',
			'VIDYO_ENDPOINTBASETRANSPORTTYPE_UDP'
		}
		export enum VidyoEndpointLogCompressionResult{
			'VIDYO_ENDPOINTLOGCOMPRESSIONRESULT_Success',
			'VIDYO_ENDPOINTLOGCOMPRESSIONRESULT_MiscError'
		}
		export enum VidyoEndpointMediaState{
			'VIDYO_ENDPOINTMEDIASTATE_Idle',
			'VIDYO_ENDPOINTMEDIASTATE_GreenRoom',
			'VIDYO_ENDPOINTMEDIASTATE_Live'
		}
		export enum VidyoEndpointMode{
			'VIDYO_ENDPOINTMODE_Default',
			'VIDYO_ENDPOINTMODE_Foreground',
			'VIDYO_ENDPOINTMODE_Background'
		}
		export enum VidyoEndpointTone{
			'VIDYO_ENDPOINTTONE_Join',
			'VIDYO_ENDPOINTTONE_Leave',
			'VIDYO_ENDPOINTTONE_MsgRecv',
			'VIDYO_ENDPOINTTONE_MsgSend',
			'VIDYO_ENDPOINTTONE_Ring',
			'VIDYO_ENDPOINTTONE_Max'
		}
		export enum VidyoEndpointTradeOffProfile{
			'VIDYO_ENDPOINTTRADEOFFPROFILE_High',
			'VIDYO_ENDPOINTTRADEOFFPROFILE_Medium',
			'VIDYO_ENDPOINTTRADEOFFPROFILE_Low'
		}
		export enum VidyoLogLevel{
			'VIDYO_LOGLEVEL_FATAL',
			'VIDYO_LOGLEVEL_ERROR',
			'VIDYO_LOGLEVEL_WARNING',
			'VIDYO_LOGLEVEL_INFO',
			'VIDYO_LOGLEVEL_DEBUG',
			'VIDYO_LOGLEVEL_SENT',
			'VIDYO_LOGLEVEL_RECEIVED',
			'VIDYO_LOGLEVEL_ENTER',
			'VIDYO_LOGLEVEL_LEAVE',
			'VIDYO_LOGLEVEL_INVALID'
		}
		export enum VidyoMediaFormat{
			'VIDYO_MEDIAFORMAT_IN16',
			'VIDYO_MEDIAFORMAT_FL32',
			'VIDYO_MEDIAFORMAT_NULL',
			'VIDYO_MEDIAFORMAT_I420',
			'VIDYO_MEDIAFORMAT_YU12',
			'VIDYO_MEDIAFORMAT_YUYV',
			'VIDYO_MEDIAFORMAT_YUY2',
			'VIDYO_MEDIAFORMAT_yuvs',
			'VIDYO_MEDIAFORMAT_2vuy',
			'VIDYO_MEDIAFORMAT_UYVY',
			'VIDYO_MEDIAFORMAT_HDYC',
			'VIDYO_MEDIAFORMAT_yuv2',
			'VIDYO_MEDIAFORMAT_yuvu',
			'VIDYO_MEDIAFORMAT_NV12',
			'VIDYO_MEDIAFORMAT_NV21',
			'VIDYO_MEDIAFORMAT_24BG',
			'VIDYO_MEDIAFORMAT_raw',
			'VIDYO_MEDIAFORMAT_BGRA',
			'VIDYO_MEDIAFORMAT_RGBA',
			'VIDYO_MEDIAFORMAT_ARGB',
			'VIDYO_MEDIAFORMAT_BYR1',
			'VIDYO_MEDIAFORMAT_BYR2',
			'VIDYO_MEDIAFORMAT_JPEG',
			'VIDYO_MEDIAFORMAT_MJPG',
			'VIDYO_MEDIAFORMAT_dmb1',
			'VIDYO_MEDIAFORMAT_avc1',
			'VIDYO_MEDIAFORMAT_hvc1',
			'VIDYO_MEDIAFORMAT_M420',
			'VIDYO_MEDIAFORMAT_420f',
			'VIDYO_MEDIAFORMAT_420v',
			'VIDYO_MEDIAFORMAT_Y8'
		}
		export enum VidyoParticipantTrust{
			'VIDYO_PARTICIPANTTRUST_Local',
			'VIDYO_PARTICIPANTTRUST_Federated',
			'VIDYO_PARTICIPANTTRUST_Anonymous'
		}
		export enum VidyoRole{
			'VIDYO_ROLE_Moderator',
			'VIDYO_ROLE_None'
		}
		export enum VidyoRoomDeleteResult{
			'VIDYO_ROOMDELETERESULT_OK',
			'VIDYO_ROOMDELETERESULT_NoResponse',
			'VIDYO_ROOMDELETERESULT_Unauthorized',
			'VIDYO_ROOMDELETERESULT_OutOfResources',
			'VIDYO_ROOMDELETERESULT_MiscError'
		}
		export enum VidyoRoomEnterResult{
			'VIDYO_ROOMENTERRESULT_OK',
			'VIDYO_ROOMENTERRESULT_Cancelled',
			'VIDYO_ROOMENTERRESULT_NoResponse',
			'VIDYO_ROOMENTERRESULT_InvalidPassword',
			'VIDYO_ROOMENTERRESULT_UnknownRoom',
			'VIDYO_ROOMENTERRESULT_RoomFull',
			'VIDYO_ROOMENTERRESULT_NotMember',
			'VIDYO_ROOMENTERRESULT_Banned',
			'VIDYO_ROOMENTERRESULT_MiscLocalError',
			'VIDYO_ROOMENTERRESULT_MiscRemoteError'
		}
		export enum VidyoRoomExitReason{
			'VIDYO_ROOMEXITREASON_Left',
			'VIDYO_ROOMEXITREASON_ConnectionLost',
			'VIDYO_ROOMEXITREASON_SessionConnectionLost',
			'VIDYO_ROOMEXITREASON_MembershipConnectionLost',
			'VIDYO_ROOMEXITREASON_NoResponse',
			'VIDYO_ROOMEXITREASON_ProtocolViolation',
			'VIDYO_ROOMEXITREASON_Booted',
			'VIDYO_ROOMEXITREASON_ShuttingDown',
			'VIDYO_ROOMEXITREASON_MiscLocalError',
			'VIDYO_ROOMEXITREASON_MiscRemoteError'
		}
		export enum VidyoRoomGetPropertiesResult{
			'VIDYO_ROOMGETPROPERTIESRESULT_OK',
			'VIDYO_ROOMGETPROPERTIESRESULT_NoResponse',
			'VIDYO_ROOMGETPROPERTIESRESULT_Unauthorized',
			'VIDYO_ROOMGETPROPERTIESRESULT_MiscLocalError',
			'VIDYO_ROOMGETPROPERTIESRESULT_MiscRemoteError'
		}
		export enum VidyoRoomInviteResult{
			'VIDYO_ROOMINVITERESULT_OK',
			'VIDYO_ROOMINVITERESULT_NoResponse',
			'VIDYO_ROOMINVITERESULT_Unauthorized',
			'VIDYO_ROOMINVITERESULT_OutOfResources',
			'VIDYO_ROOMINVITERESULT_MiscError',
			'VIDYO_ROOMINVITERESULT_UserIsOffline',
			'VIDYO_ROOMINVITERESULT_ServerError'
		}
		export enum VidyoRoomMediaDisableReason{
			'VIDYO_ROOMMEDIADISABLEREASON_Disabled',
			'VIDYO_ROOMMEDIADISABLEREASON_SignalingConnectionLost',
			'VIDYO_ROOMMEDIADISABLEREASON_MediaConnectionLost',
			'VIDYO_ROOMMEDIADISABLEREASON_Booted',
			'VIDYO_ROOMMEDIADISABLEREASON_SessionTerminated',
			'VIDYO_ROOMMEDIADISABLEREASON_ServerShuttingDown',
			'VIDYO_ROOMMEDIADISABLEREASON_ConferenceDestroyed',
			'VIDYO_ROOMMEDIADISABLEREASON_MiscLocalError',
			'VIDYO_ROOMMEDIADISABLEREASON_MiscRemoteError'
		}
		export enum VidyoRoomMediaFailReason{
			'VIDYO_ROOMMEDIAFAILREASON_Cancelled',
			'VIDYO_ROOMMEDIAFAILREASON_NoConference',
			'VIDYO_ROOMMEDIAFAILREASON_SignalingConnectionLost',
			'VIDYO_ROOMMEDIAFAILREASON_MediaConnectionLost',
			'VIDYO_ROOMMEDIAFAILREASON_NoResponse',
			'VIDYO_ROOMMEDIAFAILREASON_InvalidPassword',
			'VIDYO_ROOMMEDIAFAILREASON_RoomIsFull',
			'VIDYO_ROOMMEDIAFAILREASON_InvalidRoomKey',
			'VIDYO_ROOMMEDIAFAILREASON_RoomDisabled',
			'VIDYO_ROOMMEDIAFAILREASON_AllLinesInUse',
			'VIDYO_ROOMMEDIAFAILREASON_ConnectionError',
			'VIDYO_ROOMMEDIAFAILREASON_InvalidRoom',
			'VIDYO_ROOMMEDIAFAILREASON_ConferenceLocked',
			'VIDYO_ROOMMEDIAFAILREASON_SeatLicenseExpired',
			'VIDYO_ROOMMEDIAFAILREASON_NotLicensed',
			'VIDYO_ROOMMEDIAFAILREASON_Rejected',
			'VIDYO_ROOMMEDIAFAILREASON_UnknownError',
			'VIDYO_ROOMMEDIAFAILREASON_MiscLocalError',
			'VIDYO_ROOMMEDIAFAILREASON_MiscRemoteError'
		}
		export enum VidyoRoomProfileControlMode{
			'VIDYO_ROOMPROFILECONTROLMODE_AlwaysOn',
			'VIDYO_ROOMPROFILECONTROLMODE_AlwaysOff',
			'VIDYO_ROOMPROFILECONTROLMODE_Default'
		}
		export enum VidyoRoomSearchResult{
			'VIDYO_ROOMSEARCHRESULT_OK',
			'VIDYO_ROOMSEARCHRESULT_NoRecords',
			'VIDYO_ROOMSEARCHRESULT_NoResponse',
			'VIDYO_ROOMSEARCHRESULT_Unauthorized',
			'VIDYO_ROOMSEARCHRESULT_MiscLocalError',
			'VIDYO_ROOMSEARCHRESULT_MiscRemoteError'
		}
		export enum VidyoRoomSetFavoriteResult{
			'VIDYO_ROOMSETFAVORITERESULT_OK',
			'VIDYO_ROOMSETFAVORITERESULT_NoResponse',
			'VIDYO_ROOMSETFAVORITERESULT_Conflict',
			'VIDYO_ROOMSETFAVORITERESULT_Unauthorized',
			'VIDYO_ROOMSETFAVORITERESULT_NotAcceptable',
			'VIDYO_ROOMSETFAVORITERESULT_NotAllowed',
			'VIDYO_ROOMSETFAVORITERESULT_MiscLocalError',
			'VIDYO_ROOMSETFAVORITERESULT_MiscRemoteError'
		}
		export enum VidyoRoomSetPropertiesResult{
			'VIDYO_ROOMSETPROPERTIESRESULT_OK',
			'VIDYO_ROOMSETPROPERTIESRESULT_NoResponse',
			'VIDYO_ROOMSETPROPERTIESRESULT_Conflict',
			'VIDYO_ROOMSETPROPERTIESRESULT_Unauthorized',
			'VIDYO_ROOMSETPROPERTIESRESULT_NotAcceptable',
			'VIDYO_ROOMSETPROPERTIESRESULT_NotAllowed',
			'VIDYO_ROOMSETPROPERTIESRESULT_MiscLocalError',
			'VIDYO_ROOMSETPROPERTIESRESULT_MiscRemoteError'
		}
		export enum VidyoRoomState{
			'VIDYO_ROOMSTATE_Creating',
			'VIDYO_ROOMSTATE_Created',
			'VIDYO_ROOMSTATE_Entering',
			'VIDYO_ROOMSTATE_Entered',
			'VIDYO_ROOMSTATE_MediaRouteAcquiring',
			'VIDYO_ROOMSTATE_MediaRouteAcquired',
			'VIDYO_ROOMSTATE_MediaEnabling',
			'VIDYO_ROOMSTATE_MediaEnabled',
			'VIDYO_ROOMSTATE_MediaDisabling',
			'VIDYO_ROOMSTATE_MediaDisabled',
			'VIDYO_ROOMSTATE_Exiting',
			'VIDYO_ROOMSTATE_Exited'
		}
		export enum VidyoRoomType{
			'VIDYO_ROOMTYPE_Unknown',
			'VIDYO_ROOMTYPE_Conversation',
			'VIDYO_ROOMTYPE_Topic',
			'VIDYO_ROOMTYPE_Scheduled',
			'VIDYO_ROOMTYPE_Personal',
			'VIDYO_ROOMTYPE_TestCall',
			'VIDYO_ROOMTYPE_Legacy'
		}
		export enum VidyoRoomSearchField{
			'VIDYO_ROOMSEARCHFIELD_Owner',
			'VIDYO_ROOMSEARCHFIELD_Admin',
			'VIDYO_ROOMSEARCHFIELD_Moderator',
			'VIDYO_ROOMSEARCHFIELD_Member',
			'VIDYO_ROOMSEARCHFIELD_User',
			'VIDYO_ROOMSEARCHFIELD_Name',
			'VIDYO_ROOMSEARCHFIELD_Subject',
			'VIDYO_ROOMSEARCHFIELD_Type',
			'VIDYO_ROOMSEARCHFIELD_Public',
			'VIDYO_ROOMSEARCHFIELD_NonMembers'
		}
		export enum VidyoRoomSearchFieldRelation{
			'VIDYO_ROOMSEARCHFIELDRELATION_AND',
			'VIDYO_ROOMSEARCHFIELDRELATION_OR'
		}
		export enum VidyoUserAuthType{
			'VIDYO_USERAUTHTYPE_Guest',
			'VIDYO_USERAUTHTYPE_Password',
			'VIDYO_USERAUTHTYPE_AccessToken',
			'VIDYO_USERAUTHTYPE_RefreshToken',
			'VIDYO_USERAUTHTYPE_ProvisionToken',
			'VIDYO_USERAUTHTYPE_Facebook',
			'VIDYO_USERAUTHTYPE_Saml',
			'VIDYO_USERAUTHTYPE_Cac'
		}
		export enum VidyoUserCallCreateResult{
			'VIDYO_USERCALLCREATERESULT_OK',
			'VIDYO_USERCALLCREATERESULT_NoResponse',
			'VIDYO_USERCALLCREATERESULT_NotAllowed',
			'VIDYO_USERCALLCREATERESULT_MiscLocalError',
			'VIDYO_USERCALLCREATERESULT_MiscRemoteError'
		}
		export enum VidyoUserConnectionStatusChangedReason{
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_OK',
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_LostContactWithServer',
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_NoCommunicationWithServer',
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_NoValidNetworkInterfaces',
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_NetworkInterfaceChanged',
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_MiscNetworkError',
			'VIDYO_USERCONNECTIONSTATUSCHANGEDREASON_ConnectionError'
		}
		export enum VidyoUserGetAuthTypesResult{
			'VIDYO_USERGETAUTHTYPESRESULT_OK',
			'VIDYO_USERGETAUTHTYPESRESULT_ConnectionFailed',
			'VIDYO_USERGETAUTHTYPESRESULT_ConnectionLost',
			'VIDYO_USERGETAUTHTYPESRESULT_ConnectionTimeout',
			'VIDYO_USERGETAUTHTYPESRESULT_NoResponse',
			'VIDYO_USERGETAUTHTYPESRESULT_WebProxyAuthenticationFailed',
			'VIDYO_USERGETAUTHTYPESRESULT_TlsFailed',
			'VIDYO_USERGETAUTHTYPESRESULT_ServiceUnavailable',
			'VIDYO_USERGETAUTHTYPESRESULT_MiscLocalError',
			'VIDYO_USERGETAUTHTYPESRESULT_MiscRemoteError',
			'VIDYO_USERGETAUTHTYPESRESULT_UnSupportedTenantVersion',
			'VIDYO_USERGETAUTHTYPESRESULT_NoValidNetworkInterface'
		}
		export enum VidyoUserGetContactResult{
			'VIDYO_USERGETCONTACTRESULT_OK',
			'VIDYO_USERGETCONTACTRESULT_NoResponse',
			'VIDYO_USERGETCONTACTRESULT_Unauthorized',
			'VIDYO_USERGETCONTACTRESULT_MiscLocalError',
			'VIDYO_USERGETCONTACTRESULT_MiscRemoteError'
		}
		export enum VidyoUserLoginResult{
			'VIDYO_USERLOGINRESULT_OK',
			'VIDYO_USERLOGINRESULT_ConnectionFailed',
			'VIDYO_USERLOGINRESULT_ConnectionLost',
			'VIDYO_USERLOGINRESULT_ConnectionTimeout',
			'VIDYO_USERLOGINRESULT_NoResponse',
			'VIDYO_USERLOGINRESULT_Terminated',
			'VIDYO_USERLOGINRESULT_InvalidUser',
			'VIDYO_USERLOGINRESULT_InvalidPassword',
			'VIDYO_USERLOGINRESULT_MiscAuthError',
			'VIDYO_USERLOGINRESULT_Cancelled',
			'VIDYO_USERLOGINRESULT_MiscError',
			'VIDYO_USERLOGINRESULT_WebProxyAuthenticationRequired',
			'VIDYO_USERLOGINRESULT_ServiceUnavailable',
			'VIDYO_USERLOGINRESULT_RoomIsFull',
			'VIDYO_USERLOGINRESULT_RoomIsDisabled',
			'VIDYO_USERLOGINRESULT_TlsFailed',
			'VIDYO_USERLOGINRESULT_CertificateVerificationFailed',
			'VIDYO_USERLOGINRESULT_UnsupportedTenantVersion',
			'VIDYO_USERLOGINRESULT_NoValidNetworkInterface'
		}
		export enum VidyoUserLogoutReason{
			'VIDYO_USERLOGOUTREASON_LoggedOut',
			'VIDYO_USERLOGOUTREASON_ConnectionLost',
			'VIDYO_USERLOGOUTREASON_ConnectionTimeout',
			'VIDYO_USERLOGOUTREASON_NoResponse',
			'VIDYO_USERLOGOUTREASON_Terminated',
			'VIDYO_USERLOGOUTREASON_MiscError',
			'VIDYO_USERLOGOUTREASON_LoggedInElsewhere',
			'VIDYO_USERLOGOUTREASON_NetworkInterfaceChanged',
			'VIDYO_USERLOGOUTREASON_OutOfLicenses',
			'VIDYO_USERLOGOUTREASON_EpClientBadConnection',
			'VIDYO_USERLOGOUTREASON_EpClientBadVersion',
			'VIDYO_USERLOGOUTREASON_EpClientBadSessionId',
			'VIDYO_USERLOGOUTREASON_EpClientBadComms',
			'VIDYO_USERLOGOUTREASON_EpClientRebootRequested',
			'VIDYO_USERLOGOUTREASON_EpClientShutdownRequested',
			'VIDYO_USERLOGOUTREASON_EpClientRestartRequested',
			'VIDYO_USERLOGOUTREASON_EpClientInternalError',
			'VIDYO_USERLOGOUTREASON_EndpointNotBound',
			'VIDYO_USERLOGOUTREASON_InvalidAuth',
			'VIDYO_USERLOGOUTREASON_EpClientStartFailure'
		}
		export enum VidyoUserRoomCreateResult{
			'VIDYO_USERROOMCREATERESULT_OK',
			'VIDYO_USERROOMCREATERESULT_NoResponse',
			'VIDYO_USERROOMCREATERESULT_NotFound',
			'VIDYO_USERROOMCREATERESULT_Unauthorized',
			'VIDYO_USERROOMCREATERESULT_MiscLocalError',
			'VIDYO_USERROOMCREATERESULT_MiscRemoteError',
			'VIDYO_USERROOMCREATERESULT_DuplicateName',
			'VIDYO_USERROOMCREATERESULT_LimitReached',
			'VIDYO_USERROOMCREATERESULT_NotSupported'
		}
		export enum VidyoUserSearchField{
			'VIDYO_USERSEARCHFIELD_UID',
			'VIDYO_USERSEARCHFIELD_EMAIL',
			'VIDYO_USERSEARCHFIELD_NAME',
			'VIDYO_USERSEARCHFIELD_TELNO'
		}
		export enum VidyoUserSearchResult{
			'VIDYO_USERSEARCHRESULT_OK',
			'VIDYO_USERSEARCHRESULT_NoRecords',
			'VIDYO_USERSEARCHRESULT_NoResponse',
			'VIDYO_USERSEARCHRESULT_MiscLocalError',
			'VIDYO_USERSEARCHRESULT_MiscRemoteError'
		}
		export enum VidyoUserState{
			'VIDYO_USERSTATE_Idle',
			'VIDYO_USERSTATE_LoggingIn',
			'VIDYO_USERSTATE_LoggedIn',
			'VIDYO_USERSTATE_Reconnecting',
			'VIDYO_USERSTATE_RequestingAuthenticationTypes'
		}
		export enum VidyoUserTokenType{
			'VIDYO_USERTOKENTYPE_RefreshToken',
			'VIDYO_USERTOKENTYPE_AccessToken'
		}
		export enum VidyoMeetingActionResult{
			'VIDYO_MEETINGACTIONRESULT_Ok',
			'VIDYO_MEETINGACTIONRESULT_NoRecord',
			'VIDYO_MEETINGACTIONRESULT_NoResponse',
			'VIDYO_MEETINGACTIONRESULT_Unauthorized',
			'VIDYO_MEETINGACTIONRESULT_MiscLocalError',
			'VIDYO_MEETINGACTIONRESULT_MiscRemoteError'
		}
		export enum VidyoMeetingAttendeesSearchResult{
			'VIDYO_MEETINGATTENDEESSEARCHRESULT_Ok',
			'VIDYO_MEETINGATTENDEESSEARCHRESULT_IndexOutOfRange',
			'VIDYO_MEETINGATTENDEESSEARCHRESULT_NoRecords',
			'VIDYO_MEETINGATTENDEESSEARCHRESULT_NoResponse',
			'VIDYO_MEETINGATTENDEESSEARCHRESULT_MiscLocalError',
			'VIDYO_MEETINGATTENDEESSEARCHRESULT_MiscRemoteError'
		}
		export enum VidyoCalendarConnectParamType{
			'VIDYO_CALENDARCONNECTPARAMTYPE_Unknown',
			'VIDYO_CALENDARCONNECTPARAMTYPE_UserId',
			'VIDYO_CALENDARCONNECTPARAMTYPE_PasswordToken',
			'VIDYO_CALENDARCONNECTPARAMTYPE_Mailbox',
			'VIDYO_CALENDARCONNECTPARAMTYPE_ServerAddress'
		}
		export enum VidyoAttendeeParticipationRole{
			'VIDYO_ATTENDEEPARTICIPATIONROLE_Chair',
			'VIDYO_ATTENDEEPARTICIPATIONROLE_Required',
			'VIDYO_ATTENDEEPARTICIPATIONROLE_Optional',
			'VIDYO_ATTENDEEPARTICIPATIONROLE_Informational'
		}
		export enum VidyoAttendeeParticipationStatus{
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_NeedsAction',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_Organized',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_Accepted',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_Declined',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_Tentative',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_Delegated',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_None',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_Completed',
			'VIDYO_ATTENDEEPARTICIPATIONSTATUS_InProcess'
		}
		export enum VidyoNetworkInterfaceFamily{
			'VIDYO_NETWORKINTERFACEFAMILY_Unspecified',
			'VIDYO_NETWORKINTERFACEFAMILY_IPV4',
			'VIDYO_NETWORKINTERFACEFAMILY_IPV6'
		}
		export enum VidyoNetworkInterfaceState{
			'VIDYO_NETWORKINTERFACESTATE_Unknown',
			'VIDYO_NETWORKINTERFACESTATE_Up',
			'VIDYO_NETWORKINTERFACESTATE_Down'
		}
		export enum VidyoNetworkInterfaceTransportType{
			'VIDYO_NETWORKINTERFACETRANSPORTTYPE_Signaling',
			'VIDYO_NETWORKINTERFACETRANSPORTTYPE_Media',
			'VIDYO_NETWORKINTERFACETRANSPORTTYPE_Data'
		}
		export enum VidyoNetworkInterfaceType{
			'VIDYO_NETWORKINTERFACETYPE_Wired',
			'VIDYO_NETWORKINTERFACETYPE_WiFi',
			'VIDYO_NETWORKINTERFACETYPE_Wwan',
			'VIDYO_NETWORKINTERFACETYPE_Loopback',
			'VIDYO_NETWORKINTERFACETYPE_Tunneled',
			'VIDYO_NETWORKINTERFACETYPE_Other',
			'VIDYO_NETWORKINTERFACETYPE_NotApplicable'
		}
		type VidyoCalendarManagerFeedbackCalendarCreated = (cm: VidyoCalendarManager, calendar: VidyoCalendar, resultCode: string, createToken: string) => void;
		type VidyoCalendarManagerFeedbackCalendarDestroyed = (cm: VidyoCalendarManager, resultCode: string, pluginServiceId: string, calendarName: string) => void;
		type VidyoCalendarFeedbackConnectResult = (c: VidyoCalendar, result: string) => void;
		type VidyoCalendarFeedbackDisconnected = (c: VidyoCalendar, result: string) => void;
		type VidyoCalendarFeedbackGetCapabilitiesResult = (c: VidyoCalendar, capabilities: string[], values: string[]) => void;
		type VidyoCalendarFeedbackGetMeetingsResult = (c: VidyoCalendar, searchResult: string, meetings: VidyoMeetingInfo[], currentIndex: number, numRecords: number) => void;
		type VidyoCalendarFeedbackMeetingCreatedById = (c: VidyoCalendar, m: VidyoMeeting, r: string, createToken: string) => void;
		type VidyoCalendarFeedbackMeetingCreatedByService = (c: VidyoCalendar, m: VidyoMeetingInfo) => void;
		type VidyoCalendarFeedbackMeetingReminder = (c: VidyoCalendar, m: VidyoMeetingInfo) => void;
		type VidyoCalendarFeedbackMeetingRemovedByService = (c: VidyoCalendar, m: VidyoMeetingInfo) => void;
		type VidyoCalendarFeedbackMeetingUpdatedByService = (c: VidyoCalendar, m: VidyoMeetingInfo) => void;
		type VidyoCalendarFeedbackSeriesUpdate = (c: VidyoCalendar, m: VidyoMeetingInfo) => void;
		type VidyoConnectorOnAvailableResourcesChanged = (cpuEncode: number, cpuDecode: number, bandwidthSend: number, bandwidthReceive: number) => void;
		type VidyoConnectorOnChatMessageReceived = (participant: VidyoParticipant, chatMessage: VidyoChatMessage) => void;
		type VidyoConnectorOnDisconnected = (reason: string) => void;
		type VidyoConnectorOnDynamicParticipantChanged = (participants: VidyoParticipant[]) => void;
		type VidyoConnectorOnFailure = (reason: string) => void;
		type VidyoConnectorOnLocalCameraAdded = (localCamera: VidyoLocalCamera) => void;
		type VidyoConnectorOnLocalCameraFrame = (localCamera: VidyoLocalCamera, videoFrame: VidyoVideoFrame) => void;
		type VidyoConnectorOnLocalCameraRemoved = (localCamera: VidyoLocalCamera) => void;
		type VidyoConnectorOnLocalCameraSelected = (localCamera: VidyoLocalCamera) => void;
		type VidyoConnectorOnLocalCameraStateUpdated = (localCamera: VidyoLocalCamera, state: string) => void;
		type VidyoConnectorOnLocalMicrophoneAdded = (localMicrophone: VidyoLocalMicrophone) => void;
		type VidyoConnectorOnLocalMicrophoneEnergy = (localMicrophone: VidyoLocalMicrophone, audioEnergy: number) => void;
		type VidyoConnectorOnLocalMicrophoneFrame = (localMicrophone: VidyoLocalMicrophone, audioFrame: VidyoAudioFrame) => void;
		type VidyoConnectorOnLocalMicrophoneRemoved = (localMicrophone: VidyoLocalMicrophone) => void;
		type VidyoConnectorOnLocalMicrophoneSelected = (localMicrophone: VidyoLocalMicrophone) => void;
		type VidyoConnectorOnLocalMicrophoneStateUpdated = (localMicrophone: VidyoLocalMicrophone, state: string) => void;
		type VidyoConnectorOnLocalMonitorAdded = (localMonitor: VidyoLocalMonitor) => void;
		type VidyoConnectorOnLocalMonitorFrame = (localMonitor: VidyoLocalMonitor, videoFrame: VidyoVideoFrame) => void;
		type VidyoConnectorOnLocalMonitorRemoved = (localMonitor: VidyoLocalMonitor) => void;
		type VidyoConnectorOnLocalMonitorSelected = (localMonitor: VidyoLocalMonitor) => void;
		type VidyoConnectorOnLocalMonitorStateUpdated = (localMonitor: VidyoLocalMonitor, state: string) => void;
		type VidyoConnectorOnLocalSpeakerAdded = (localSpeaker: VidyoLocalSpeaker) => void;
		type VidyoConnectorOnLocalSpeakerRemoved = (localSpeaker: VidyoLocalSpeaker) => void;
		type VidyoConnectorOnLocalSpeakerSelected = (localSpeaker: VidyoLocalSpeaker) => void;
		type VidyoConnectorOnLocalSpeakerStateUpdated = (localSpeaker: VidyoLocalSpeaker, state: string) => void;
		type VidyoConnectorOnLocalWindowShareAdded = (localWindowShare: VidyoLocalWindowShare) => void;
		type VidyoConnectorOnLocalWindowShareFrame = (localWindowShare: VidyoLocalWindowShare, videoFrame: VidyoVideoFrame) => void;
		type VidyoConnectorOnLocalWindowShareRemoved = (localWindowShare: VidyoLocalWindowShare) => void;
		type VidyoConnectorOnLocalWindowShareSelected = (localWindowShare: VidyoLocalWindowShare) => void;
		type VidyoConnectorOnLocalWindowShareStateUpdated = (localWindowShare: VidyoLocalWindowShare, state: string) => void;
		type VidyoConnectorOnLog = (logRecord: VidyoLogRecord) => void;
		type VidyoConnectorOnLoudestParticipantChanged = (participant: VidyoParticipant, audioOnly: boolean) => void;
		type VidyoConnectorOnMaxRemoteSourcesChanged = (maxRemoteSources: number) => void;
		type VidyoConnectorOnNetworkInterfaceAdded = (networkInterface: VidyoNetworkInterface) => void;
		type VidyoConnectorOnNetworkInterfaceRemoved = (networkInterface: VidyoNetworkInterface) => void;
		type VidyoConnectorOnNetworkInterfaceSelected = (networkInterface: VidyoNetworkInterface, transportType: string) => void;
		type VidyoConnectorOnNetworkInterfaceStateUpdated = (networkInterface: VidyoNetworkInterface, state: string) => void;
		type VidyoConnectorOnParticipantJoined = (participant: VidyoParticipant) => void;
		type VidyoConnectorOnParticipantLeft = (participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteCameraAdded = (remoteCamera: VidyoRemoteCamera, participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteCameraFrame = (remoteCamera: VidyoRemoteCamera, participant: VidyoParticipant, videoFrame: VidyoVideoFrame) => void;
		type VidyoConnectorOnRemoteCameraRemoved = (remoteCamera: VidyoRemoteCamera, participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteCameraStateUpdated = (remoteCamera: VidyoRemoteCamera, participant: VidyoParticipant, state: string) => void;
		type VidyoConnectorOnRemoteMicrophoneAdded = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteMicrophoneEnergy = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant, audioEnergy: number) => void;
		type VidyoConnectorOnRemoteMicrophoneFrame = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant, audioFrame: VidyoAudioFrame) => void;
		type VidyoConnectorOnRemoteMicrophoneRemoved = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteMicrophoneStateUpdated = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant, state: string) => void;
		type VidyoConnectorOnRemoteWindowShareAdded = (remoteWindowShare: VidyoRemoteWindowShare, participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteWindowShareFrame = (remoteWindowShare: VidyoRemoteWindowShare, participant: VidyoParticipant, videoFrame: VidyoVideoFrame) => void;
		type VidyoConnectorOnRemoteWindowShareRemoved = (remoteWindowShare: VidyoRemoteWindowShare, participant: VidyoParticipant) => void;
		type VidyoConnectorOnRemoteWindowShareStateUpdated = (remoteWindowShare: VidyoRemoteWindowShare, participant: VidyoParticipant, state: string) => void;
		type VidyoConnectorOnSuccess = () => void;
		type VidyoConnectorOnWebProxyCredentialsRequest = (webProxyAddress: string) => void;
		type VidyoConnectorRecorderInCall = (recorderInCall: boolean) => void;
		type VidyoGatewayOnDisconnected = (reason: string) => void;
		type VidyoGatewayOnFailure = (reason: string) => void;
		type VidyoGatewayOnSuccess = () => void;
		type VidyoLocalMonitorOnPreviewDataUriComplete = (videoFrame: string, state: string) => void;
		type VidyoLocalRendererOnPipLocationChanged = (x: number, y: number, width: number, height: number, isExpanded: boolean) => void;
		type VidyoLocalWindowShareOnApplicationIconDataUriComplete = (icon: string) => void;
		type VidyoLocalWindowShareOnPreviewDataUriComplete = (videoFrame: string, state: string) => void;
		type VidyoRemoteCameraOnFrameSizeUpdate = (width: number, height: number) => void;
		type VidyoVideoFrameReleaseCallback = (buffer: number, size: number, alloc: LmiAllocator) => void;
		type VidyoVirtualWindowShareReconfigureCallback = (frameInterval: number, mediaFormat: string, userData: number) => void;
		type VidyoVirtualWindowShareStartCallback = (frameInterval: number, mediaFormat: string, userData: number) => void;
		type VidyoVirtualWindowShareStopCallback = (userData: number) => void;
		type VidyoApplicationDownloadCompletedCallback = (version: string, downloadedFile: string) => void;
		type VidyoApplicationDownloadFailedCallback = (reason: string) => void;
		type VidyoCallOnEnded = (p: VidyoParticipant, reason: string) => void;
		type VidyoCallOnInitiated = (result: string, p: VidyoParticipant) => void;
		type VidyoCallOnMessageAcknowledged = (chatMessage: VidyoChatMessage) => void;
		type VidyoCallOnMessageRead = (participant: VidyoParticipant, messageId: number) => void;
		type VidyoCallOnMessageReceived = (participant: VidyoParticipant, chatMessage: VidyoChatMessage) => void;
		type VidyoCallOnMessageTypingIndication = (participant: VidyoParticipant, typingIndication: string) => void;
		type VidyoCallOnSetSubject = (subject: string) => void;
		type VidyoEndpointOnLocalCameraAdded = (localCamera: VidyoLocalCamera) => void;
		type VidyoEndpointOnLocalCameraFrame = (localCamera: VidyoLocalCamera, videoFrame: VidyoVideoFrame) => void;
		type VidyoEndpointOnLocalCameraRemoved = (localCamera: VidyoLocalCamera) => void;
		type VidyoEndpointOnLocalCameraSelected = (localCamera: VidyoLocalCamera) => void;
		type VidyoEndpointOnLocalCameraStateUpdated = (localCamera: VidyoLocalCamera, state: string) => void;
		type VidyoEndpointOnLocalMicrophoneAdded = (localMicrophone: VidyoLocalMicrophone) => void;
		type VidyoEndpointOnLocalMicrophoneEnergy = (localMicrophone: VidyoLocalMicrophone, audioEnergy: number) => void;
		type VidyoEndpointOnLocalMicrophoneFrame = (localMicrophone: VidyoLocalMicrophone, audioFrame: VidyoAudioFrame) => void;
		type VidyoEndpointOnLocalMicrophoneRemoved = (localMicrophone: VidyoLocalMicrophone) => void;
		type VidyoEndpointOnLocalMicrophoneSelected = (localMicrophone: VidyoLocalMicrophone) => void;
		type VidyoEndpointOnLocalMicrophoneStateUpdated = (localMicrophone: VidyoLocalMicrophone, state: string) => void;
		type VidyoEndpointOnLocalMonitorAdded = (localMonitor: VidyoLocalMonitor) => void;
		type VidyoEndpointOnLocalMonitorFrame = (localMonitor: VidyoLocalMonitor, videoFrame: VidyoVideoFrame) => void;
		type VidyoEndpointOnLocalMonitorRemoved = (localMonitor: VidyoLocalMonitor) => void;
		type VidyoEndpointOnLocalMonitorSelected = (localMonitor: VidyoLocalMonitor) => void;
		type VidyoEndpointOnLocalMonitorStateUpdated = (localMonitor: VidyoLocalMonitor, state: string) => void;
		type VidyoEndpointOnLocalRendererAdded = (localRenderer: VidyoLocalRenderer) => void;
		type VidyoEndpointOnLocalRendererRemoved = (localRenderer: VidyoLocalRenderer) => void;
		type VidyoEndpointOnLocalRendererSelected = (localRenderer: VidyoLocalRenderer) => void;
		type VidyoEndpointOnLocalRendererStateUpdated = (localRenderer: VidyoLocalRenderer, state: string) => void;
		type VidyoEndpointOnLocalSpeakerAdded = (localSpeaker: VidyoLocalSpeaker) => void;
		type VidyoEndpointOnLocalSpeakerRemoved = (localSpeaker: VidyoLocalSpeaker) => void;
		type VidyoEndpointOnLocalSpeakerSelected = (localSpeaker: VidyoLocalSpeaker) => void;
		type VidyoEndpointOnLocalSpeakerStateUpdated = (localSpeaker: VidyoLocalSpeaker, state: string) => void;
		type VidyoEndpointOnLocalWindowShareAdded = (localWindowShare: VidyoLocalWindowShare) => void;
		type VidyoEndpointOnLocalWindowShareFrame = (localWindowShare: VidyoLocalWindowShare, videoFrame: VidyoVideoFrame) => void;
		type VidyoEndpointOnLocalWindowShareRemoved = (localWindowShare: VidyoLocalWindowShare) => void;
		type VidyoEndpointOnLocalWindowShareSelected = (localWindowShare: VidyoLocalWindowShare) => void;
		type VidyoEndpointOnLocalWindowShareStateUpdated = (localWindowShare: VidyoLocalWindowShare, state: string) => void;
		type VidyoEndpointOnLog = (logRecord: VidyoLogRecord) => void;
		type VidyoEndpointOnLogCompressionComplete = (compressedFileName: string, result: string) => void;
		type VidyoEndpointOnNetworkInterfaceAdded = (networkInterface: VidyoNetworkInterface) => void;
		type VidyoEndpointOnNetworkInterfaceRemoved = (networkInterface: VidyoNetworkInterface) => void;
		type VidyoEndpointOnNetworkInterfaceSelected = (networkInterface: VidyoNetworkInterface, transportType: string) => void;
		type VidyoEndpointOnNetworkInterfaceStateUpdated = (networkInterface: VidyoNetworkInterface, state: string) => void;
		type VidyoEndpointOnRemoteCameraAdded = (remoteCamera: VidyoRemoteCamera, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant) => void;
		type VidyoEndpointOnRemoteCameraFrame = (remoteCamera: VidyoRemoteCamera, participant: VidyoParticipant, videoFrame: VidyoVideoFrame) => void;
		type VidyoEndpointOnRemoteCameraRemoved = (remoteCamera: VidyoRemoteCamera, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant) => void;
		type VidyoEndpointOnRemoteCameraStateUpdated = (remoteCamera: VidyoRemoteCamera, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant, state: string) => void;
		type VidyoEndpointOnRemoteMicrophoneAdded = (remoteMicrophone: VidyoRemoteMicrophone, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant) => void;
		type VidyoEndpointOnRemoteMicrophoneEnergy = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant, audioEnergy: number) => void;
		type VidyoEndpointOnRemoteMicrophoneFrame = (remoteMicrophone: VidyoRemoteMicrophone, participant: VidyoParticipant, audioFrame: VidyoAudioFrame) => void;
		type VidyoEndpointOnRemoteMicrophoneRemoved = (remoteMicrophone: VidyoRemoteMicrophone, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant) => void;
		type VidyoEndpointOnRemoteMicrophoneStateUpdated = (remoteMicrophone: VidyoRemoteMicrophone, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant, state: string) => void;
		type VidyoEndpointOnRemoteRendererAdded = (remoteRenderer: VidyoRemoteRenderer, user: VidyoUser, call: VidyoCall, room: VidyoRoom) => void;
		type VidyoEndpointOnRemoteRendererRemoved = (remoteRenderer: VidyoRemoteRenderer, user: VidyoUser, call: VidyoCall, room: VidyoRoom) => void;
		type VidyoEndpointOnRemoteSpeakerAdded = (remoteSpeaker: VidyoRemoteSpeaker, user: VidyoUser, call: VidyoCall, room: VidyoRoom) => void;
		type VidyoEndpointOnRemoteSpeakerRemoved = (remoteSpeaker: VidyoRemoteSpeaker, user: VidyoUser, call: VidyoCall, room: VidyoRoom) => void;
		type VidyoEndpointOnRemoteWindowShareAdded = (remoteWindowShare: VidyoRemoteWindowShare, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant) => void;
		type VidyoEndpointOnRemoteWindowShareFrame = (remoteWindowShare: VidyoRemoteWindowShare, participant: VidyoParticipant, videoFrame: VidyoVideoFrame) => void;
		type VidyoEndpointOnRemoteWindowShareRemoved = (remoteWindowShare: VidyoRemoteWindowShare, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant) => void;
		type VidyoEndpointOnRemoteWindowShareStateUpdated = (remoteWindowShare: VidyoRemoteWindowShare, user: VidyoUser, call: VidyoCall, room: VidyoRoom, participant: VidyoParticipant, state: string) => void;
		type VidyoRoomOnAvailableResourcesChanged = (cpuEncode: number, cpuDecode: number, bandwidthSend: number, bandwidthReceive: number) => void;
		type VidyoRoomOnDeleteResult = (result: string) => void;
		type VidyoRoomOnDynamicParticipantChanged = (selectedParticipants: VidyoParticipant[]) => void;
		type VidyoRoomOnEntered = (result: string) => void;
		type VidyoRoomOnExited = (reason: string) => void;
		type VidyoRoomOnGetHistoryResults = (records: VidyoChatMessage[], historySize: number, result: string) => void;
		type VidyoRoomOnGetRoomPropertiesResult = (result: string, roomProperties: VidyoRoomProperties) => void;
		type VidyoRoomOnIncomingEntered = (result: string) => void;
		type VidyoRoomOnIncomingExited = (reason: string) => void;
		type VidyoRoomOnInviteResult = (inviteeId: string, result: string) => void;
		type VidyoRoomOnLoudestParticipantChanged = (participant: VidyoParticipant, isAudioOnly: boolean, isStatic: boolean) => void;
		type VidyoRoomOnMaxRemoteSourcesChanged = (maxRemoteSources: number) => void;
		type VidyoRoomOnMediaDisabled = (reason: string) => void;
		type VidyoRoomOnMediaEnabled = () => void;
		type VidyoRoomOnMediaFailed = (reason: string) => void;
		type VidyoRoomOnMediaRouteAcquireFailed = (reason: string) => void;
		type VidyoRoomOnMediaRouteAcquired = () => void;
		type VidyoRoomOnMessageAcknowledged = (chatMessage: VidyoChatMessage) => void;
		type VidyoRoomOnMessageRead = (participant: VidyoParticipant, messageId: number) => void;
		type VidyoRoomOnMessageReceived = (participant: VidyoParticipant, chatMessage: VidyoChatMessage) => void;
		type VidyoRoomOnMessageSearchResults = (searchText: string, records: VidyoChatMessage[], result: string) => void;
		type VidyoRoomOnMessageTypingIndication = (participant: VidyoParticipant, typingIndication: string) => void;
		type VidyoRoomOnParticipantJoined = (participant: VidyoParticipant) => void;
		type VidyoRoomOnParticipantLeft = (participant: VidyoParticipant) => void;
		type VidyoRoomOnPipLocationChanged = (x: number, y: number, width: number, height: number, isExpanded: boolean) => void;
		type VidyoRoomOnRequestRoleChangeResult = (result: string, requestId: string) => void;
		type VidyoRoomOnRoomPropertiesChanged = (roomProperties: VidyoRoomProperties) => void;
		type VidyoRoomOnSetFavoriteResult = (isFavorite: boolean, result: string) => void;
		type VidyoRoomOnSetRoomPropertiesResult = (result: string) => void;
		type VidyoRoomOnSetSubject = (subject: string) => void;
		type VidyoRoomOnUnprocessedAudioStarted = (started: boolean) => void;
		type VidyoRoomOnUnprocessedAudioSupportChanged = (supported: boolean) => void;
		type VidyoRoomRecorderInCall = (recorderInCall: boolean) => void;
		type VidyoUserOnAuthTypes = (result: string, authTypes: VidyoUserAuthenticationInfo[]) => void;
		type VidyoUserOnAuthTypesWebProxyCredentialsRequest = (webProxyAddress: string) => void;
		type VidyoUserOnCallCreated = (call: VidyoCall, result: string, createToken: string) => void;
		type VidyoUserOnCallCreatedByInvite = (call: VidyoCall, inviter: VidyoContact) => void;
		type VidyoUserOnConnectionStatusChanged = (reason: string) => void;
		type VidyoUserOnFavoriteRoomResults = (searchResult: string, roomInfo: VidyoRoomInfo[]) => void;
		type VidyoUserOnGetContactResult = (contact: VidyoContact, result: string) => void;
		type VidyoUserOnGetLicenseKey = (licenseKey: string) => void;
		type VidyoUserOnLicenseReceived = (licenseKey: string) => void;
		type VidyoUserOnLoggedOut = (reason: string) => void;
		type VidyoUserOnLoginComplete = (result: string, secure: boolean, capabilities: VidyoTenantCapabilities) => void;
		type VidyoUserOnPasswordResetUrl = (passwordResetUrl: string) => void;
		type VidyoUserOnRecentRoomResults = (searchResult: string, roomInfo: VidyoRoomInfo[]) => void;
		type VidyoUserOnRemoveRosterContact = (uri: string) => void;
		type VidyoUserOnRoomCreated = (room: VidyoRoom, result: string, createToken: string) => void;
		type VidyoUserOnRoomCreatedByInvite = (room: VidyoRoom, inviter: VidyoContact, message: string) => void;
		type VidyoUserOnRoomInviteCancelled = (roomInfo: VidyoRoomInfo, message: string) => void;
		type VidyoUserOnRoomSearchResults = (searchText: string, searchResult: string, roomInfo: VidyoRoomInfo[], numRecords: number) => void;
		type VidyoUserOnTokenReceived = (token: string, tokenType: string) => void;
		type VidyoUserOnUpdateRosterContact = (contact: VidyoContact) => void;
		type VidyoUserOnUpdateSelf = (contact: VidyoContact) => void;
		type VidyoUserOnUserSearchResults = (searchText: string, searchResult: string, contacts: VidyoContactInfo[], numRecords: number) => void;
		type VidyoUserOnWebProxyCredentialsRequest = (webProxyAddress: string) => void;
		type VidyoMeetingFeedbackGetMeetingAttendeeResults = (meeting: VidyoMeeting, attendeeList: VidyoMeetingAttendee[], searchResult: string, currentIndex: number, numRecords: number) => void;
		export class VidyoCalendarManagerFeedback {

		constructor(calendarCreated: VidyoCalendarManagerFeedbackCalendarCreated, calendarDestroyed: VidyoCalendarManagerFeedbackCalendarDestroyed);
		}
		export class VidyoCalendarFeedback {

		constructor(connectState: VidyoCalendarFeedbackConnectResult, disconnected: VidyoCalendarFeedbackDisconnected, capabilities: VidyoCalendarFeedbackGetCapabilitiesResult, meetingReminder: VidyoCalendarFeedbackMeetingReminder, meetingCreatedById: VidyoCalendarFeedbackMeetingCreatedById, meetingCreatedByService: VidyoCalendarFeedbackMeetingCreatedByService, meetingUpdatedByService: VidyoCalendarFeedbackMeetingUpdatedByService, meetingRemovedByService: VidyoCalendarFeedbackMeetingRemovedByService, getMeetingResults: VidyoCalendarFeedbackGetMeetingsResult, seriesUpdate: VidyoCalendarFeedbackSeriesUpdate);
		Destruct(): void;
		}
		export class VidyoMeetingFeedback {

		constructor(getAttendeeResults: VidyoMeetingFeedbackGetMeetingAttendeeResults);
		Destruct(): void;
		}
		export class VidyoCalendarManager {

			constructor(feedback: VidyoCalendarManagerFeedback);
			Destruct(): void;
			CreateCalendarInstance(argObject: {feedback: VidyoCalendarFeedback, pluginServiceId: string, calendarName: string, createToken: string}):Promise<boolean>;
			DestroyCalendarInstance(argObject: {cal: VidyoCalendar}):Promise<boolean>;
			GetCalendarRegisteredServices(argObject: {svcNames: string[]}):Promise<boolean>;
			RegisterCalendarService(argObject: {pluginServiceName: string, dllName: string}):Promise<boolean>;
		}
		export class VidyoFormField {

			cols: number;
			maxlength: number;
			multiple: boolean;
			name: string;
			options: VidyoFormFieldOption[];
			rows: number;
			size: number;
			type: string;
			value: string;
			wrap: string;
		}
		export class VidyoFormFieldOption {

			selected: boolean;
			value: string;
		}
		export class VidyoCalendar {

			id: string;
			serviceState: string;
			serviceType: string;
			Destruct(): void;
			Connect(argObject: {connProperties: VidyoCalendarConnProps[]}):Promise<boolean>;
			CreateMeetingWithId(argObject: {id: string, feedback: VidyoMeetingFeedback, createToken: string}):Promise<boolean>;
			Disconnect():Promise<boolean>;
			GetCapabilities(argObject: {requestedCapabilities: string[]}):Promise<boolean>;
			GetId():Promise<string>;
			GetServiceState():Promise<string>;
			GetServiceType():Promise<string>;
			SearchMeetings(argObject: {searchText: string, beginDateTime: string, endDateTime: string, index: number, pageSize: number}):Promise<string>;
			SearchMeetingsByDay(argObject: {year: number, month: number, day: number, createToken: string}):Promise<boolean>;
			SetSingleSignOn(argObject: {setSingleSignOn: boolean}):Promise<boolean>;
		}
		export class VidyoConnector {

			constructor(viewId: string, viewStyle: string, remoteParticipants: number, logFileFilter: string, logFileName: string, userData: number);
			Destruct(): void;
			AssignViewToCompositeRenderer(argObject: {viewId: string, viewStyle: string, remoteParticipants: number}):Promise<boolean>;
			AssignViewToLocalCamera(argObject: {viewId: string, localCamera: VidyoLocalCamera, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToLocalMonitor(argObject: {viewId: string, localMonitor: VidyoLocalMonitor, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToLocalWindowShare(argObject: {viewId: string, localWindowShare: VidyoLocalWindowShare, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToRemoteCamera(argObject: {viewId: string, remoteCamera: VidyoRemoteCamera, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToRemoteWindowShare(argObject: {viewId: string, remoteWindowShare: VidyoRemoteWindowShare, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			Connect(argObject: {host: string, token: string, displayName: string, resourceId: string, onSuccess: VidyoConnectorOnSuccess, onFailure: VidyoConnectorOnFailure, onDisconnected: VidyoConnectorOnDisconnected}):Promise<boolean>;
			ConnectToRoomAsGuest(argObject: {host: string, displayName: string, roomKey: string, roomPin: string, onSuccess: VidyoConnectorOnSuccess, onFailure: VidyoConnectorOnFailure, onDisconnected: VidyoConnectorOnDisconnected}):Promise<boolean>;
			ConnectToRoomWithId(argObject: {host: string, userName: string, password: string, roomId: string, roomPin: string, onSuccess: VidyoConnectorOnSuccess, onFailure: VidyoConnectorOnFailure, onDisconnected: VidyoConnectorOnDisconnected}):Promise<boolean>;
			ConnectToRoomWithKey(argObject: {host: string, userName: string, password: string, roomKey: string, roomPin: string, onSuccess: VidyoConnectorOnSuccess, onFailure: VidyoConnectorOnFailure, onDisconnected: VidyoConnectorOnDisconnected}):Promise<boolean>;
			ConnectToRoomWithTokenAndId(argObject: {host: string, userName: string, token: string, roomId: string, roomPin: string, onSuccess: VidyoConnectorOnSuccess, onFailure: VidyoConnectorOnFailure, onDisconnected: VidyoConnectorOnDisconnected}):Promise<boolean>;
			ConnectToRoomWithTokenAndKey(argObject: {host: string, userName: string, token: string, roomKey: string, roomPin: string, onSuccess: VidyoConnectorOnSuccess, onFailure: VidyoConnectorOnFailure, onDisconnected: VidyoConnectorOnDisconnected}):Promise<boolean>;
			CycleCamera():Promise<boolean>;
			CycleMicrophone():Promise<boolean>;
			CycleSpeaker():Promise<boolean>;
			Disable():Promise<any>;
			DisableDebug():Promise<any>;
			Disconnect():Promise<any>;
			EnableDebug(argObject: {port: number, logFilter: string}):Promise<boolean>;
			GetCpuTradeOffProfile():Promise<string>;
			GetState():Promise<string>;
			GetStatsJson():Promise<string>;
			GetVersion():Promise<string>;
			GetVersionWithoutBuildNumber():Promise<string>;
			HideView(argObject: {viewId: string}):Promise<boolean>;
			RegisterLocalCameraEventListener(argObject: {onAdded: VidyoConnectorOnLocalCameraAdded, onRemoved: VidyoConnectorOnLocalCameraRemoved, onSelected: VidyoConnectorOnLocalCameraSelected, onStateUpdated: VidyoConnectorOnLocalCameraStateUpdated}):Promise<boolean>;
			RegisterLocalCameraFrameListener(argObject: {onFrame: VidyoConnectorOnLocalCameraFrame, localCamera: VidyoLocalCamera, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterLocalMicrophoneEnergyListener(argObject: {onEnergy: VidyoConnectorOnLocalMicrophoneEnergy}):Promise<boolean>;
			RegisterLocalMicrophoneEventListener(argObject: {onAdded: VidyoConnectorOnLocalMicrophoneAdded, onRemoved: VidyoConnectorOnLocalMicrophoneRemoved, onSelected: VidyoConnectorOnLocalMicrophoneSelected, onStateUpdated: VidyoConnectorOnLocalMicrophoneStateUpdated}):Promise<boolean>;
			RegisterLocalMicrophoneFrameListener(argObject: {onFrame: VidyoConnectorOnLocalMicrophoneFrame, localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			RegisterLocalMonitorEventListener(argObject: {onAdded: VidyoConnectorOnLocalMonitorAdded, onRemoved: VidyoConnectorOnLocalMonitorRemoved, onSelected: VidyoConnectorOnLocalMonitorSelected, onStateUpdated: VidyoConnectorOnLocalMonitorStateUpdated}):Promise<boolean>;
			RegisterLocalMonitorFrameListener(argObject: {onFrame: VidyoConnectorOnLocalMonitorFrame, localMonitor: VidyoLocalMonitor, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterLocalSpeakerEventListener(argObject: {onAdded: VidyoConnectorOnLocalSpeakerAdded, onRemoved: VidyoConnectorOnLocalSpeakerRemoved, onSelected: VidyoConnectorOnLocalSpeakerSelected, onStateUpdated: VidyoConnectorOnLocalSpeakerStateUpdated}):Promise<boolean>;
			RegisterLocalWindowShareEventListener(argObject: {onAdded: VidyoConnectorOnLocalWindowShareAdded, onRemoved: VidyoConnectorOnLocalWindowShareRemoved, onSelected: VidyoConnectorOnLocalWindowShareSelected, onStateUpdated: VidyoConnectorOnLocalWindowShareStateUpdated}):Promise<boolean>;
			RegisterLocalWindowShareFrameListener(argObject: {onFrame: VidyoConnectorOnLocalWindowShareFrame, localWindowShare: VidyoLocalWindowShare, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterLogEventListener(argObject: {onLog: VidyoConnectorOnLog, filter: string}):Promise<boolean>;
			RegisterMessageEventListener(argObject: {onChatMessageReceived: VidyoConnectorOnChatMessageReceived}):Promise<boolean>;
			RegisterNetworkInterfaceEventListener(argObject: {onAdded: VidyoConnectorOnNetworkInterfaceAdded, onRemoved: VidyoConnectorOnNetworkInterfaceRemoved, onSelected: VidyoConnectorOnNetworkInterfaceSelected, onStateUpdated: VidyoConnectorOnNetworkInterfaceStateUpdated}):Promise<boolean>;
			RegisterParticipantEventListener(argObject: {onJoined: VidyoConnectorOnParticipantJoined, onLeft: VidyoConnectorOnParticipantLeft, onDynamicChanged: VidyoConnectorOnDynamicParticipantChanged, onLoudestChanged: VidyoConnectorOnLoudestParticipantChanged}):Promise<boolean>;
			RegisterRecorderInCallEventListener(argObject: {onRecorderInCallChanged: VidyoConnectorRecorderInCall}):Promise<boolean>;
			RegisterRemoteCameraEventListener(argObject: {onAdded: VidyoConnectorOnRemoteCameraAdded, onRemoved: VidyoConnectorOnRemoteCameraRemoved, onStateUpdated: VidyoConnectorOnRemoteCameraStateUpdated}):Promise<boolean>;
			RegisterRemoteCameraFrameListener(argObject: {onFrame: VidyoConnectorOnRemoteCameraFrame, remoteCamera: VidyoRemoteCamera, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterRemoteMicrophoneEnergyListener(argObject: {onEnergy: VidyoConnectorOnRemoteMicrophoneEnergy}):Promise<boolean>;
			RegisterRemoteMicrophoneEventListener(argObject: {onAdded: VidyoConnectorOnRemoteMicrophoneAdded, onRemoved: VidyoConnectorOnRemoteMicrophoneRemoved, onStateUpdated: VidyoConnectorOnRemoteMicrophoneStateUpdated}):Promise<boolean>;
			RegisterRemoteMicrophoneFrameListener(argObject: {onFrame: VidyoConnectorOnRemoteMicrophoneFrame, remoteMicrophone: VidyoRemoteMicrophone}):Promise<boolean>;
			RegisterRemoteWindowShareEventListener(argObject: {onAdded: VidyoConnectorOnRemoteWindowShareAdded, onRemoved: VidyoConnectorOnRemoteWindowShareRemoved, onStateUpdated: VidyoConnectorOnRemoteWindowShareStateUpdated}):Promise<boolean>;
			RegisterRemoteWindowShareFrameListener(argObject: {onFrame: VidyoConnectorOnRemoteWindowShareFrame, remoteWindowShare: VidyoRemoteWindowShare, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterResourceManagerEventListener(argObject: {onAvailableResourcesChanged: VidyoConnectorOnAvailableResourcesChanged, onMaxRemoteSourcesChanged: VidyoConnectorOnMaxRemoteSourcesChanged}):Promise<boolean>;
			RegisterWebProxyEventListener(argObject: {onWebProxyCredentialsRequest: VidyoConnectorOnWebProxyCredentialsRequest}):Promise<boolean>;
			ReportLocalParticipantOnJoined(argObject: {reportLocalParticipant: boolean}):Promise<boolean>;
			SelectAudioContentShare(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			SelectDefaultCamera():Promise<boolean>;
			SelectDefaultMicrophone():Promise<boolean>;
			SelectDefaultNetworkInterfaceForMedia():Promise<boolean>;
			SelectDefaultNetworkInterfaceForSignaling():Promise<boolean>;
			SelectDefaultSpeaker():Promise<boolean>;
			SelectLocalCamera(argObject: {localCamera: VidyoLocalCamera}):Promise<boolean>;
			SelectLocalMicrophone(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			SelectLocalMonitor(argObject: {localMonitor: VidyoLocalMonitor}):Promise<boolean>;
			SelectLocalSpeaker(argObject: {localSpeaker: VidyoLocalSpeaker}):Promise<boolean>;
			SelectLocalWindowShare(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<boolean>;
			SelectNetworkInterfaceForMedia(argObject: {networkInterface: VidyoNetworkInterface}):Promise<boolean>;
			SelectNetworkInterfaceForSignaling(argObject: {networkInterface: VidyoNetworkInterface}):Promise<boolean>;
			SelectVideoContentShare(argObject: {localCamera: VidyoLocalCamera}):Promise<boolean>;
			SelectVirtualWindowShare(argObject: {virtualWindowShare: VidyoVirtualWindowShare}):Promise<boolean>;
			SendChatMessage(argObject: {message: string}):Promise<boolean>;
			SetAdvancedOptions(argObject: {options: string}):Promise<boolean>;
			SetCameraNudgeConfiguration(argObject: {cameraNudgeConfig: string}):Promise<boolean>;
			SetCameraPrivacy(argObject: {privacy: boolean}):Promise<boolean>;
			SetCertificateAuthorityList(argObject: {certificateAuthorityList: string}):Promise<any>;
			SetCpuTradeOffProfile(argObject: {profile: string}):Promise<boolean>;
			SetFontFileName(argObject: {fontFileName: string}):Promise<boolean>;
			SetLocation(argObject: {latitude: number, longitude: number}):Promise<boolean>;
			SetMaxBitRate(argObject: {bitRate: number}):Promise<any>;
			SetMicrophonePrivacy(argObject: {privacy: boolean}):Promise<boolean>;
			SetMode(argObject: {mode: string}):Promise<boolean>;
			SetPool(argObject: {name: string}):Promise<boolean>;
			SetSpeakerPrivacy(argObject: {privacy: boolean}):Promise<boolean>;
			SetTCPTransport(argObject: {enable: boolean}):Promise<boolean>;
			SetTURNAddressCredentials(argObject: {turnAddress: string, port: number, username: string, password: string, baseTransport: string}):Promise<boolean>;
			SetTURNServerCertificateRequired(argObject: {required: boolean}):Promise<boolean>;
			SetUDPTransport(argObject: {enable: boolean}):Promise<boolean>;
			SetViewAnimationSpeed(argObject: {viewId: string, speedPercentage: number}):Promise<boolean>;
			SetViewBackgroundColor(argObject: {viewId: string, red: number, green: number, blue: number}):Promise<boolean>;
			SetWebProxyAddressCredentials(argObject: {proxyAddress: string, username: string, password: string}):Promise<any>;
			SetWebProxyTransport(argObject: {enable: boolean}):Promise<boolean>;
			ShowAudioMeters(argObject: {viewId: string, showMeters: boolean}):Promise<boolean>;
			ShowPreview(argObject: {preview: boolean}):Promise<boolean>;
			ShowViewAt(argObject: {viewId: string, x: number, y: number, width: number, height: number}):Promise<boolean>;
			ShowViewAtPoints(argObject: {viewId: string, x: number, y: number, width: number, height: number}):Promise<boolean>;
			ShowViewLabel(argObject: {viewId: string, showLabel: boolean}):Promise<boolean>;
			ShowWindowSharePreview(argObject: {preview: boolean}):Promise<boolean>;
			UnregisterLocalCameraEventListener():Promise<boolean>;
			UnregisterLocalCameraFrameListener(argObject: {localCamera: VidyoLocalCamera}):Promise<boolean>;
			UnregisterLocalMicrophoneEnergyListener():Promise<boolean>;
			UnregisterLocalMicrophoneEventListener():Promise<boolean>;
			UnregisterLocalMicrophoneFrameListener(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			UnregisterLocalMonitorEventListener():Promise<boolean>;
			UnregisterLocalMonitorFrameListener(argObject: {localMonitor: VidyoLocalMonitor}):Promise<boolean>;
			UnregisterLocalSpeakerEventListener():Promise<boolean>;
			UnregisterLocalWindowShareEventListener():Promise<boolean>;
			UnregisterLocalWindowShareFrameListener(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<boolean>;
			UnregisterLogEventListener():Promise<boolean>;
			UnregisterMessageEventListener():Promise<boolean>;
			UnregisterNetworkInterfaceEventListener():Promise<boolean>;
			UnregisterParticipantEventListener():Promise<boolean>;
			UnregisterRecorderInCallEventListener():Promise<boolean>;
			UnregisterRemoteCameraEventListener():Promise<boolean>;
			UnregisterRemoteCameraFrameListener(argObject: {remoteCamera: VidyoRemoteCamera}):Promise<boolean>;
			UnregisterRemoteMicrophoneEnergyListener():Promise<boolean>;
			UnregisterRemoteMicrophoneEventListener():Promise<boolean>;
			UnregisterRemoteMicrophoneFrameListener(argObject: {remoteMicrophone: VidyoRemoteMicrophone}):Promise<boolean>;
			UnregisterRemoteWindowShareEventListener():Promise<boolean>;
			UnregisterRemoteWindowShareFrameListener(argObject: {remoteWindowShare: VidyoRemoteWindowShare}):Promise<boolean>;
			UnregisterResourceManagerEventListener():Promise<boolean>;
			UnregisterWebProxyEventListener():Promise<boolean>;
		}
		export class VidyoGateway {

			Destruct(): void;
			Connect(argObject: {host: string, token: string, displayName: string, resourceId: string, onSuccess: VidyoGatewayOnSuccess, onFailure: VidyoGatewayOnFailure, onDisconnected: VidyoGatewayOnDisconnected}):Promise<boolean>;
			Disconnect():Promise<any>;
		}
		export class VidyoAudioFrame {

			bitsPerSample: number;
			data: number;
			discontinuity: boolean;
			discontinuityBitPresent: boolean;
			elapsedTime: number;
			energy: number;
			energyBitPresent: boolean;
			format: string;
			numberOfChannels: number;
			numberOfSamples: number;
			sampleRate: number;
			size: number;
			speech: boolean;
			speechBitPresent: boolean;
			timestamp: number;
			Destruct(): void;
			GetBitsPerSample():Promise<number>;
			GetData():Promise<number>;
			GetDiscontinuity():Promise<boolean>;
			GetDiscontinuityBitPresent():Promise<boolean>;
			GetElapsedTime():Promise<number>;
			GetEnergy():Promise<number>;
			GetEnergyBitPresent():Promise<boolean>;
			GetFormat():Promise<string>;
			GetNumberOfChannels():Promise<number>;
			GetNumberOfSamples():Promise<number>;
			GetSampleRate():Promise<number>;
			GetSize():Promise<number>;
			GetSpeech():Promise<boolean>;
			GetSpeechBitPresent():Promise<boolean>;
			GetTimestamp():Promise<number>;
		}
		export class VidyoDevice {

			id: string;
			name: string;
			type: string;
			Destruct(): void;
			DerivedEqual():Promise<boolean>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetType():Promise<string>;
		}
		export class VidyoLocalCamera {

			id: string;
			name: string;
			Destruct(): void;
			AddToLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer}):Promise<number>;
			AddToRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			AllowRemoteCameraControl(argObject: {allow: boolean}):Promise<boolean>;
			ControlPTZ(argObject: {pan: number, tilt: number, zoom: number}):Promise<boolean>;
			GetBacklightCompensation():Promise<boolean>;
			GetFramerateTradeOffProfile():Promise<string>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetPosition():Promise<string>;
			GetPreviewLabel():Promise<string>;
			GetResolutionTradeOffProfile():Promise<string>;
			GetVideoCapabilities(argObject: {capabilities: VidyoVideoCapability[]}):Promise<boolean>;
			IsControlDigital():Promise<boolean>;
			IsPaused():Promise<boolean>;
			IsSuspended():Promise<boolean>;
			RemoveFromLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer}):Promise<boolean>;
			RemoveFromRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			Resume():Promise<any>;
			SetAspectRatioConstraint(argObject: {aspectRatioWidth: number, aspectRatioHeight: number}):Promise<boolean>;
			SetBacklightCompensation(argObject: {backlightCompensation: boolean}):Promise<boolean>;
			SetBoundsConstraint(argObject: {minWidth: number, minHeight: number, maxWidth: number, maxHeight: number, maxFrameInterval: number, minFrameInterval: number, aspectRatioWidth: number, aspectRatioHeight: number, temporalSpatialTradeOff: number}):Promise<boolean>;
			SetCapabilitiesConstraint(argObject: {capabilities: VidyoVideoCapability[], temporalSpatialTradeOff: number}):Promise<boolean>;
			SetConstraints(argObject: {minWidth: number, minHeight: number, maxWidth: number, maxHeight: number, maxFrameInterval: number, minFrameInterval: number, aspectRatioWidth: number, aspectRatioHeight: number, temporalSpatialTradeOff: number, capabilities: VidyoVideoCapability[]}):Promise<boolean>;
			SetControlDigital(argObject: {digital: boolean}):Promise<any>;
			SetFramerateTradeOffProfile(argObject: {profile: string}):Promise<boolean>;
			SetMaxConstraint(argObject: {width: number, height: number, frameInterval: number}):Promise<boolean>;
			SetNudgeTimes(argObject: {panTime: number, tiltTime: number, zoomTime: number}):Promise<boolean>;
			SetPositionInLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
			SetPreviewLabel(argObject: {previewLabel: string}):Promise<boolean>;
			SetResolutionTradeOffProfile(argObject: {profile: string}):Promise<boolean>;
			SetTargetBitRate(argObject: {bitRate: number}):Promise<any>;
			ShowCameraControl(argObject: {show: boolean}):Promise<boolean>;
		}
		export class VidyoLocalMicrophone {

			id: string;
			name: string;
			Destruct(): void;
			AddToLocalSpeaker(argObject: {speaker: VidyoLocalSpeaker}):Promise<boolean>;
			AddToRemoteSpeaker(argObject: {remoteSpeaker: VidyoRemoteSpeaker}):Promise<boolean>;
			DisableDebugRecording():Promise<boolean>;
			EnableDebugRecording(argObject: {dir: string}):Promise<boolean>;
			GetAutoGain():Promise<boolean>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetSignalType():Promise<string>;
			GetVoiceProcessing():Promise<boolean>;
			GetVolume():Promise<number>;
			HideDebugDialog():Promise<any>;
			IsDebugRecordingEnabled():Promise<boolean>;
			IsPaused():Promise<boolean>;
			Pause():Promise<any>;
			PlayTone(argObject: {dtmfTone: string}):Promise<any>;
			RemoveFromLocalSpeaker(argObject: {speaker: VidyoLocalSpeaker}):Promise<boolean>;
			RemoveFromRemoteSpeaker(argObject: {remoteSpeaker: VidyoRemoteSpeaker}):Promise<boolean>;
			Resume():Promise<any>;
			SetAutoGain(argObject: {autoGain: boolean}):Promise<boolean>;
			SetEchoCancellation(argObject: {speaker: VidyoLocalSpeaker, isEnable: boolean}):Promise<boolean>;
			SetSignalType(argObject: {signalType: string}):Promise<boolean>;
			SetVoiceProcessing(argObject: {voiceProcessing: boolean, mode: string}):Promise<boolean>;
			SetVolume(argObject: {volumePercent: number}):Promise<any>;
			ShowDebugDialog():Promise<any>;
		}
		export class VidyoLocalMonitor {

			id: string;
			name: string;
			Destruct(): void;
			AddToLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<number>;
			AddToRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			ClearConstraints():Promise<any>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetPreviewFrameDataUri(argObject: {maxWidth: number, maxHeight: number, videoFrame: string}):Promise<string>;
			GetPreviewFrameDataUriAsync(argObject: {maxWidth: number, maxHeight: number, onComplete: VidyoLocalMonitorOnPreviewDataUriComplete}):Promise<boolean>;
			IsPrimary():Promise<boolean>;
			PrecludeApplication(argObject: {w: VidyoLocalWindowShare}):Promise<any>;
			PrecludeWindow(argObject: {w: VidyoLocalWindowShare}):Promise<any>;
			RemoveFromLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<boolean>;
			RemoveFromRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			SetBoundsConstraints(argObject: {maxFrameInterval: number, minFrameInterval: number, maxWidth: number, minWidth: number, maxHeight: number, minHeight: number}):Promise<boolean>;
			SetCaptureInterval(argObject: {frameInterval: number}):Promise<boolean>;
			SetDiscreteConstraints(argObject: {maxFrameInterval: number, minFrameInterval: number, width: number, height: number, scaleFactor: number}):Promise<boolean>;
			SetFrameInterval(argObject: {frameInterval: number}):Promise<boolean>;
			SetLowLatencyProfile(argObject: {profile: boolean}):Promise<boolean>;
			SetPositionInLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
		}
		export class VidyoLocalRenderer {

			id: string;
			name: string;
			Destruct(): void;
			Disable():Promise<boolean>;
			EnableSelfViewCustomLayout(argObject: {enable: boolean}):Promise<any>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			IsPaused():Promise<boolean>;
			IsSelectedTileControllingRemoteCamera():Promise<boolean>;
			Pause():Promise<any>;
			PinParticipant(argObject: {p: VidyoParticipant, pin: boolean}):Promise<boolean>;
			RegisterPipEventListener(argObject: {onPipLocationChanged: VidyoLocalRendererOnPipLocationChanged}):Promise<boolean>;
			Resume():Promise<any>;
			SetAllowContentMultiScreen(argObject: {allow: boolean, displayIndex: number}):Promise<boolean>;
			SetAllowPreviewMultiScreen(argObject: {allow: boolean, displayIndex: number}):Promise<boolean>;
			SetAnimationSpeed(argObject: {speedPercentage: number}):Promise<boolean>;
			SetBackgroundColor(argObject: {red: number, green: number, blue: number}):Promise<boolean>;
			SetBorderStyle(argObject: {style: string}):Promise<any>;
			SetCropped(argObject: {cropped: boolean}):Promise<boolean>;
			SetMaxStreams(argObject: {numStreams: number}):Promise<boolean>;
			SetMaxStreamsMultiScreen(argObject: {numStreams: number, displayIndex: number}):Promise<boolean>;
			SetParametersForHighDPIDevice(argObject: {pixelsPerInch: number, viewingDistance: number, isTouchInputDevice: boolean}):Promise<boolean>;
			SetPipPosition(argObject: {x: string, y: string, lockPip: boolean}):Promise<boolean>;
			SetPosition(argObject: {x: number, y: number, width: number, height: number}):Promise<boolean>;
			SetPriorityMultiScreen(argObject: {priority: number, displayIndex: number}):Promise<boolean>;
			SetRemoteWindowSharePinMode(argObject: {autoPin: boolean}):Promise<boolean>;
			SetTilesBackgroundColor(argObject: {red: number, green: number, blue: number}):Promise<boolean>;
			ShowAudioMeters(argObject: {showMeters: boolean}):Promise<boolean>;
			ShowDebugStats(argObject: {showStats: boolean}):Promise<boolean>;
			ShowLabel(argObject: {showLabel: boolean}):Promise<boolean>;
			UnregisterPipEventListener():Promise<boolean>;
		}
		export class VidyoLocalSpeaker {

			id: string;
			name: string;
			Destruct(): void;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetVolume():Promise<number>;
			IsPaused():Promise<boolean>;
			Pause():Promise<any>;
			PlayTone(argObject: {dtmfTone: string}):Promise<any>;
			Resume():Promise<any>;
			SetVolume(argObject: {volumePercent: number}):Promise<any>;
			StopSound():Promise<any>;
		}
		export class VidyoLocalWindowShare {

			applicationName: string;
			id: string;
			name: string;
			Destruct(): void;
			AddToLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<number>;
			AddToRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			ClearConstraints():Promise<any>;
			GetApplicationIconFrameDataUriAsync(argObject: {maxWidth: number, maxHeight: number, onComplete: VidyoLocalWindowShareOnApplicationIconDataUriComplete}):Promise<boolean>;
			GetApplicationName():Promise<string>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetPreviewFrameDataUriAsync(argObject: {maxWidth: number, maxHeight: number, onComplete: VidyoLocalWindowShareOnPreviewDataUriComplete}):Promise<boolean>;
			GetPreviewLabel():Promise<string>;
			GetProcessId():Promise<number>;
			GetProcessName():Promise<string>;
			GetUpdatedName():Promise<string>;
			IsApplicationNameSet():Promise<boolean>;
			IsNameSet():Promise<boolean>;
			RemoveFromLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<boolean>;
			RemoveFromRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			SetBoundsConstraints(argObject: {maxFrameInterval: number, minFrameInterval: number, maxWidth: number, minWidth: number, maxHeight: number, minHeight: number}):Promise<boolean>;
			SetCapability(argObject: {frameInterval: number, showCursor: boolean, redactOccludedAreas: boolean}):Promise<boolean>;
			SetCursorVisibility(argObject: {showCursor: boolean}):Promise<boolean>;
			SetDiscreteConstraints(argObject: {maxFrameInterval: number, minFrameInterval: number, width: number, height: number, scaleFactor: number}):Promise<boolean>;
			SetFrameInterval(argObject: {frameInterval: number}):Promise<boolean>;
			SetLowLatencyProfile(argObject: {profile: boolean}):Promise<boolean>;
			SetPositionInLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
			SetPreviewLabel(argObject: {previewLabel: string}):Promise<boolean>;
			SetRedactOccludedAreas(argObject: {redactOccludedAreas: boolean}):Promise<boolean>;
			SetScaleFactor(argObject: {scaleFactor: number}):Promise<boolean>;
		}
		export class VidyoRemoteCamera {

			id: string;
			name: string;
			Destruct(): void;
			AddToLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, mode: string}):Promise<number>;
			ControlPTZ(argObject: {pan: number, tilt: number, zoom: number}):Promise<boolean>;
			GetId():Promise<string>;
			GetLocalRenderingStreamId(argObject: {index: number}):Promise<number>;
			GetName():Promise<string>;
			GetPosition():Promise<string>;
			IsControllable():Promise<boolean>;
			RegisterFrameSizeListener(argObject: {onFrameSizeUpdate: VidyoRemoteCameraOnFrameSizeUpdate}):Promise<boolean>;
			RemoveFromLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer}):Promise<boolean>;
			SetPositionInLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
			ShowCameraControl(argObject: {show: boolean}):Promise<boolean>;
			UnregisterFrameSizeListener():Promise<boolean>;
		}
		export class VidyoRemoteMicrophone {

			id: string;
			name: string;
			signalType: string;
			Destruct(): void;
			AddToLocalSpeaker(argObject: {speaker: VidyoLocalSpeaker, mode: string}):Promise<boolean>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetSignalType():Promise<string>;
			RemoveFromLocalSpeaker(argObject: {speaker: VidyoLocalSpeaker}):Promise<boolean>;
		}
		export class VidyoRemoteRenderer {

			id: string;
			name: string;
			Destruct(): void;
			GetId():Promise<string>;
			GetName():Promise<string>;
		}
		export class VidyoRemoteSpeaker {

			Destruct(): void;
			GetId():Promise<string>;
			GetName():Promise<string>;
		}
		export class VidyoRemoteWindowShare {

			id: string;
			name: string;
			Destruct(): void;
			AddToLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<number>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			RemoveFromLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<boolean>;
			SetPositionInLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
		}
		export class VidyoVideoCapability {

			height: number;
			ranges: VidyoVideoFrameIntervalRange[];
			width: number;
		}
		export class VidyoVideoFrameIntervalRange {

			formats: string[];
			range: VidyoTimeRange;
			step: number;
		}
		export class VidyoTimeRange {

			begin: number;
			end: number;
		}
		export class VidyoVideoFrame {

			data: number;
			dataCb: number;
			dataCr: number;
			dataY: number;
			elapsedTime: number;
			format: string;
			height: number;
			heightCb: number;
			heightCr: number;
			heightY: number;
			offsetCb: number;
			offsetCr: number;
			offsetY: number;
			pitchCb: number;
			pitchCr: number;
			pitchY: number;
			size: number;
			sizeCb: number;
			sizeCr: number;
			sizeY: number;
			timestamp: number;
			width: number;
			widthCb: number;
			widthCr: number;
			widthY: number;
			constructor(format: string, buffer: number, size: number, releaseCallback: VidyoVideoFrameReleaseCallback, width: number, height: number);
			Destruct(): void;
			GetDataCb():Promise<number>;
			GetDataCr():Promise<number>;
			GetDataY():Promise<number>;
			GetElapsedTime():Promise<number>;
			GetFormat():Promise<string>;
			GetHeight():Promise<number>;
			GetHeightCb():Promise<number>;
			GetHeightCr():Promise<number>;
			GetHeightY():Promise<number>;
			GetOffsetCb():Promise<number>;
			GetOffsetCr():Promise<number>;
			GetOffsetY():Promise<number>;
			GetPitchCb():Promise<number>;
			GetPitchCr():Promise<number>;
			GetPitchY():Promise<number>;
			GetSize():Promise<number>;
			GetSizeCb():Promise<number>;
			GetSizeCr():Promise<number>;
			GetSizeY():Promise<number>;
			GetTimestamp():Promise<number>;
			GetWidth():Promise<number>;
			GetWidthCb():Promise<number>;
			GetWidthCr():Promise<number>;
			GetWidthY():Promise<number>;
		}
		export class VidyoVirtualDeviceManager {

			Destruct(): void;
			LocalCameraEvent(argObject: {endpoint: VidyoEndpoint, camera: VidyoLocalCamera, state: string}):Promise<boolean>;
			LocalMicrophoneEvent(argObject: {endpoint: VidyoEndpoint, microphone: VidyoLocalMicrophone, state: string}):Promise<boolean>;
			LocalSpeakerEvent(argObject: {endpoint: VidyoEndpoint, speaker: VidyoLocalSpeaker, state: string}):Promise<boolean>;
			MediaFailedEvent(argObject: {endpoint: VidyoEndpoint}):Promise<boolean>;
		}
		export class VidyoVirtualShareManager {

			Destruct(): void;
			LocalMonitorEvent(argObject: {endpoint: VidyoEndpoint, monitor: VidyoLocalMonitor, state: string}):Promise<boolean>;
			LocalWindowShareEvent(argObject: {endpoint: VidyoEndpoint, windowShare: VidyoLocalWindowShare, state: string}):Promise<boolean>;
			MediaFailedEvent(argObject: {endpoint: VidyoEndpoint}):Promise<boolean>;
		}
		export class VidyoVirtualWindowShare {

			applicationName: string;
			id: string;
			name: string;
			constructor(id: string, windowName: string, applicationName: string, onStart: VidyoVirtualWindowShareStartCallback, onReconfigure: VidyoVirtualWindowShareReconfigureCallback, onStop: VidyoVirtualWindowShareStopCallback);
			Destruct(): void;
			AddToLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<number>;
			AddToRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			ClearConstraints():Promise<any>;
			GetApplicationName():Promise<string>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetPreviewLabel():Promise<string>;
			GetStats(argObject: {stats: VidyoLocalVideoSourceStats}):Promise<boolean>;
			GetUserData():Promise<number>;
			OnFrame(argObject: {videoFrame: VidyoVideoFrame, mediaFormat: string}):Promise<any>;
			RemoveFromLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<boolean>;
			RemoveFromRemoteRenderer(argObject: {remoteRenderer: VidyoRemoteRenderer}):Promise<boolean>;
			SetBoundsConstraints(argObject: {maxFrameInterval: number, minFrameInterval: number, maxWidth: number, minWidth: number, maxHeight: number, minHeight: number}):Promise<boolean>;
			SetDiscreteConstraints(argObject: {maxFrameInterval: number, minFrameInterval: number, width: number, height: number, scaleFactor: number}):Promise<boolean>;
			SetFrameInterval(argObject: {frameInterval: number}):Promise<boolean>;
			SetLowLatencyProfile(argObject: {profile: boolean}):Promise<boolean>;
			SetPositionInLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
			SetPreviewLabel(argObject: {previewLabel: string}):Promise<boolean>;
			SetScaleFactor(argObject: {scaleFactor: number}):Promise<boolean>;
		}
		export class VidyoApplication {

			constructor(endpoint: VidyoEndpoint);
			Destruct(): void;
			RegisterUpdaterEventListener(argObject: {onDownloadCompleted: VidyoApplicationDownloadCompletedCallback, onDownloadFailed: VidyoApplicationDownloadFailedCallback}):Promise<boolean>;
			SetWebProxyCredentials(argObject: {webProxyUserName: string, webProxyPassword: string}):Promise<any>;
			StartUpdateService(argObject: {currentVersion: string, workingDirectory: string, server: string, caFilePath: string, webProxyUsername: string, webProxyPassword: string}):Promise<boolean>;
			StopUpdateService():Promise<any>;
		}
		export class VidyoCall {

			id: string;
			Destruct(): void;
			Accept(argObject: {onInitiated: VidyoCallOnInitiated, onEnded: VidyoCallOnEnded}):Promise<boolean>;
			GetId():Promise<string>;
			GetParticipants(argObject: {participants: VidyoParticipant[]}):Promise<boolean>;
			GetRemoteRenderers(argObject: {renderers: VidyoRemoteRenderer[]}):Promise<boolean>;
			GetRemoteSpeakers(argObject: {speakers: VidyoRemoteSpeaker[]}):Promise<boolean>;
			GetSubject():Promise<string>;
			GetUser():Promise<VidyoUser>;
			HangUp():Promise<any>;
			Initiate(argObject: {onInitiated: VidyoCallOnInitiated, onEnded: VidyoCallOnEnded}):Promise<boolean>;
			RegisterMessageEventListener(argObject: {onMessageReceived: VidyoCallOnMessageReceived, onMessageAcknowledged: VidyoCallOnMessageAcknowledged, onMessageRead: VidyoCallOnMessageRead, onMessageTypingIndication: VidyoCallOnMessageTypingIndication}):Promise<boolean>;
			RegisterSubjectEventListener(argObject: {onSetSubject: VidyoCallOnSetSubject}):Promise<boolean>;
			Reject():Promise<any>;
			SendMessage(argObject: {message: string}):Promise<boolean>;
			SetSubject(argObject: {subject: string}):Promise<boolean>;
		}
		export class VidyoChatMessage {

			body: string;
			id: number;
			senderType: string;
			timestamp: number;
			type: string;
			userId: string;
		}
		export class VidyoContact {

			department: string;
			emails: VidyoContactProperty[];
			groups: string[];
			handle: string;
			id: string;
			name: string;
			nickname: string;
			photo: string;
			presenceState: string;
			presenceStatus: string;
			publicationState: string;
			subscriptionState: string;
			telephones: VidyoContactProperty[];
			timestamp: number;
			title: string;
		}
		export class VidyoContactProperty {

			types: string[];
			value: string;
		}
		export class VidyoContactInfo {

			emails: VidyoContactInfoProperty[];
			groups: string[];
			handle: string;
			id: string;
			name: string;
			nickname: string;
			photo: string;
			presenceState: string;
			telephones: VidyoContactInfoProperty[];
			timestamp: number;
		}
		export class VidyoContactInfoProperty {

			types: string[];
			value: string;
		}
		export class VidyoEndpoint {

			constructor(viewId: string, viewStyle: string, remoteParticipants: number, consoleLogFilter: string, logFileFilter: string, logFileName: string);
			Destruct(): void;
			AppLog(argObject: {logLevel: string, logMsg: string}):Promise<any>;
			AssignViewToCompositeRenderer(argObject: {viewId: string, viewStyle: string, remoteParticipants: number}):Promise<boolean>;
			AssignViewToLocalCamera(argObject: {viewId: string, localCamera: VidyoLocalCamera, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToLocalMonitor(argObject: {viewId: string, localMonitor: VidyoLocalMonitor, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToLocalWindowShare(argObject: {viewId: string, localWindowShare: VidyoLocalWindowShare, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToRemoteCamera(argObject: {viewId: string, remoteCamera: VidyoRemoteCamera, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			AssignViewToRemoteWindowShare(argObject: {viewId: string, remoteWindowShare: VidyoRemoteWindowShare, displayCropped: boolean, allowZoom: boolean}):Promise<boolean>;
			CompressLogs(argObject: {compressedFileName: string, onComplete: VidyoEndpointOnLogCompressionComplete}):Promise<boolean>;
			CreateRenderer(argObject: {monitor: VidyoLocalMonitor, width: number, height: number}):Promise<boolean>;
			CreateRendererFromViewId(argObject: {viewId: string, x: number, y: number, width: number, height: number}):Promise<boolean>;
			CreateRendererMultiScreen():Promise<boolean>;
			CycleCamera():Promise<boolean>;
			CycleMicrophone():Promise<boolean>;
			CycleSpeaker():Promise<boolean>;
			Disable():Promise<any>;
			DisableDebug():Promise<any>;
			EnableDebug(argObject: {port: number, logFilter: string}):Promise<boolean>;
			EnableFileLogger(argObject: {logFileName: string, logFileFilter: string}):Promise<boolean>;
			GetApplicationTag():Promise<string>;
			GetCpuTradeOffProfile():Promise<string>;
			GetFileLoggerCategoryList(argObject: {categories: VidyoLoggerCategory[]}):Promise<boolean>;
			GetId():Promise<string>;
			GetProductInfo(argObject: {productInfo: VidyoProperty[], supportedFeature: VidyoProperty[]}):Promise<boolean>;
			GetStats():Promise<VidyoEndpointStats>;
			GetStatsJson():Promise<string>;
			HideView(argObject: {viewId: string}):Promise<boolean>;
			IsDebugEnabled():Promise<boolean>;
			LocalCameraSelectAdvanced(argObject: {localCamera: VidyoLocalCamera}):Promise<any>;
			LocalCameraUnselectAdvanced(argObject: {localCamera: VidyoLocalCamera}):Promise<any>;
			LocalMicrophoneSelectAdvanced(argObject: {localMicrophone: VidyoLocalMicrophone, previewedPreCall: boolean}):Promise<any>;
			LocalMicrophoneUnselectAdvanced(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<any>;
			LocalMonitorSelectAdvanced(argObject: {localMonitor: VidyoLocalMonitor}):Promise<any>;
			LocalMonitorUnselectAdvanced(argObject: {localMonitor: VidyoLocalMonitor}):Promise<any>;
			LocalRendererSelectAdvanced(argObject: {localRenderer: VidyoLocalRenderer}):Promise<any>;
			LocalRendererUnselectAdvanced(argObject: {localRenderer: VidyoLocalRenderer}):Promise<any>;
			LocalSpeakerSelectAdvanced(argObject: {localSpeaker: VidyoLocalSpeaker}):Promise<any>;
			LocalSpeakerUnselectAdvanced(argObject: {localSpeaker: VidyoLocalSpeaker}):Promise<any>;
			LocalWindowShareSelectAdvanced(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<any>;
			LocalWindowShareUnselectAdvanced(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<any>;
			RegisterLocalCameraEventListener(argObject: {onAdded: VidyoEndpointOnLocalCameraAdded, onRemoved: VidyoEndpointOnLocalCameraRemoved, onSelected: VidyoEndpointOnLocalCameraSelected, onStateUpdated: VidyoEndpointOnLocalCameraStateUpdated}):Promise<boolean>;
			RegisterLocalCameraFrameListener(argObject: {localCamera: VidyoLocalCamera, onFrame: VidyoEndpointOnLocalCameraFrame, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterLocalMicrophoneEnergyListener(argObject: {onEnergy: VidyoEndpointOnLocalMicrophoneEnergy}):Promise<boolean>;
			RegisterLocalMicrophoneEventListener(argObject: {onAdded: VidyoEndpointOnLocalMicrophoneAdded, onRemoved: VidyoEndpointOnLocalMicrophoneRemoved, onSelected: VidyoEndpointOnLocalMicrophoneSelected, onStateUpdated: VidyoEndpointOnLocalMicrophoneStateUpdated}):Promise<boolean>;
			RegisterLocalMicrophoneFrameListener(argObject: {localMicrophone: VidyoLocalMicrophone, onFrame: VidyoEndpointOnLocalMicrophoneFrame}):Promise<boolean>;
			RegisterLocalMonitorEventListener(argObject: {onAdded: VidyoEndpointOnLocalMonitorAdded, onRemoved: VidyoEndpointOnLocalMonitorRemoved, onSelected: VidyoEndpointOnLocalMonitorSelected, onStateUpdated: VidyoEndpointOnLocalMonitorStateUpdated}):Promise<boolean>;
			RegisterLocalMonitorFrameListener(argObject: {localMonitor: VidyoLocalMonitor, onFrame: VidyoEndpointOnLocalMonitorFrame, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterLocalRendererEventListener(argObject: {onAdded: VidyoEndpointOnLocalRendererAdded, onRemoved: VidyoEndpointOnLocalRendererRemoved, onSelected: VidyoEndpointOnLocalRendererSelected, onStateUpdated: VidyoEndpointOnLocalRendererStateUpdated}):Promise<boolean>;
			RegisterLocalSpeakerEventListener(argObject: {onAdded: VidyoEndpointOnLocalSpeakerAdded, onRemoved: VidyoEndpointOnLocalSpeakerRemoved, onSelected: VidyoEndpointOnLocalSpeakerSelected, onStateUpdated: VidyoEndpointOnLocalSpeakerStateUpdated}):Promise<boolean>;
			RegisterLocalWindowShareEventListener(argObject: {onAdded: VidyoEndpointOnLocalWindowShareAdded, onRemoved: VidyoEndpointOnLocalWindowShareRemoved, onSelected: VidyoEndpointOnLocalWindowShareSelected, onStateUpdated: VidyoEndpointOnLocalWindowShareStateUpdated}):Promise<boolean>;
			RegisterLocalWindowShareFrameListener(argObject: {localWindowShare: VidyoLocalWindowShare, onFrame: VidyoEndpointOnLocalWindowShareFrame, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterLogEventListener(argObject: {onLog: VidyoEndpointOnLog, filter: string}):Promise<boolean>;
			RegisterNetworkInterfaceEventListener(argObject: {onAdded: VidyoEndpointOnNetworkInterfaceAdded, onRemoved: VidyoEndpointOnNetworkInterfaceRemoved, onSelected: VidyoEndpointOnNetworkInterfaceSelected, onStateUpdated: VidyoEndpointOnNetworkInterfaceStateUpdated}):Promise<boolean>;
			RegisterRemoteCameraEventListener(argObject: {onAdded: VidyoEndpointOnRemoteCameraAdded, onRemoved: VidyoEndpointOnRemoteCameraRemoved, onStateUpdated: VidyoEndpointOnRemoteCameraStateUpdated}):Promise<boolean>;
			RegisterRemoteCameraFrameListener(argObject: {remoteCamera: VidyoRemoteCamera, onFrame: VidyoEndpointOnRemoteCameraFrame, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RegisterRemoteMicrophoneEnergyListener(argObject: {onEnergy: VidyoEndpointOnRemoteMicrophoneEnergy}):Promise<boolean>;
			RegisterRemoteMicrophoneEventListener(argObject: {onAdded: VidyoEndpointOnRemoteMicrophoneAdded, onRemoved: VidyoEndpointOnRemoteMicrophoneRemoved, onStateUpdated: VidyoEndpointOnRemoteMicrophoneStateUpdated}):Promise<boolean>;
			RegisterRemoteMicrophoneFrameListener(argObject: {remoteMicrophone: VidyoRemoteMicrophone, onFrame: VidyoEndpointOnRemoteMicrophoneFrame}):Promise<boolean>;
			RegisterRemoteRendererEventListener(argObject: {onAdded: VidyoEndpointOnRemoteRendererAdded, onRemoved: VidyoEndpointOnRemoteRendererRemoved}):Promise<boolean>;
			RegisterRemoteSpeakerEventListener(argObject: {onAdded: VidyoEndpointOnRemoteSpeakerAdded, onRemoved: VidyoEndpointOnRemoteSpeakerRemoved}):Promise<boolean>;
			RegisterRemoteWindowShareEventListener(argObject: {onAdded: VidyoEndpointOnRemoteWindowShareAdded, onRemoved: VidyoEndpointOnRemoteWindowShareRemoved, onStateUpdated: VidyoEndpointOnRemoteWindowShareStateUpdated}):Promise<boolean>;
			RegisterRemoteWindowShareFrameListener(argObject: {remoteWindowShare: VidyoRemoteWindowShare, onFrame: VidyoEndpointOnRemoteWindowShareFrame, width: number, height: number, frameInterval: number}):Promise<boolean>;
			RemoveRenderer(argObject: {localRenderer: VidyoLocalRenderer}):Promise<any>;
			SelectAudioContentShare(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			SelectDefaultCamera():Promise<boolean>;
			SelectDefaultMicrophone():Promise<boolean>;
			SelectDefaultNetworkInterfaceForMedia():Promise<boolean>;
			SelectDefaultNetworkInterfaceForSignaling():Promise<boolean>;
			SelectDefaultSpeaker():Promise<boolean>;
			SelectLocalCamera(argObject: {localCamera: VidyoLocalCamera}):Promise<boolean>;
			SelectLocalMicrophone(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			SelectLocalMonitor(argObject: {localMonitor: VidyoLocalMonitor}):Promise<boolean>;
			SelectLocalSpeaker(argObject: {localSpeaker: VidyoLocalSpeaker}):Promise<boolean>;
			SelectLocalWindowShare(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<boolean>;
			SelectNetworkInterfaceForMedia(argObject: {networkInterface: VidyoNetworkInterface}):Promise<boolean>;
			SelectNetworkInterfaceForSignaling(argObject: {networkInterface: VidyoNetworkInterface}):Promise<boolean>;
			SelectVideoContentShare(argObject: {localCamera: VidyoLocalCamera}):Promise<boolean>;
			SelectVirtualWindowShare(argObject: {virtualWindowShare: VidyoVirtualWindowShare}):Promise<boolean>;
			SetAdvancedOptions(argObject: {options: string}):Promise<boolean>;
			SetApplicationTag(argObject: {applicationTag: string}):Promise<boolean>;
			SetCameraNudgeConfiguration(argObject: {cameraNudgeConfig: string}):Promise<boolean>;
			SetCameraPrivacy(argObject: {privacy: boolean}):Promise<boolean>;
			SetConsoleLoggerFilter(argObject: {consoleLogFilter: string}):Promise<boolean>;
			SetConsoleLoggerLevelAndCategory(argObject: {levelName: string, categoryName: string, on: boolean}):Promise<boolean>;
			SetConsoleLoggerUTC(argObject: {utc: boolean}):Promise<boolean>;
			SetCpuTradeOffProfile(argObject: {profile: string}):Promise<boolean>;
			SetDebugFilter(argObject: {debugLogFilter: string}):Promise<boolean>;
			SetFileLoggerFilter(argObject: {logFileFilter: string}):Promise<boolean>;
			SetFileLoggerLevelAndCategory(argObject: {levelName: string, categoryName: string, on: boolean}):Promise<boolean>;
			SetFileLoggerRotationParameters(argObject: {maxSize: number, wrapPeriod: number, wrapCount: number}):Promise<boolean>;
			SetFileLoggerUTC(argObject: {utc: boolean}):Promise<boolean>;
			SetFontFileName(argObject: {fontFileName: string}):Promise<boolean>;
			SetLicenseKey(argObject: {licenseKey: string}):Promise<boolean>;
			SetLocation(argObject: {latitude: number, longitude: number}):Promise<boolean>;
			SetMaxBitRate(argObject: {bitRate: number}):Promise<any>;
			SetMicrophonePrivacy(argObject: {privacy: boolean}):Promise<boolean>;
			SetMode(argObject: {mode: string}):Promise<boolean>;
			SetPool(argObject: {name: string}):Promise<boolean>;
			SetPreview(argObject: {preview: boolean}):Promise<boolean>;
			SetProductInfo(argObject: {productInfo: VidyoProperty[], supportedFeature: VidyoProperty[]}):Promise<boolean>;
			SetSpeakerPrivacy(argObject: {privacy: boolean}):Promise<boolean>;
			SetTURNAddressCredentials(argObject: {turnAddress: string, port: number, username: string, password: string, baseTransport: string}):Promise<boolean>;
			SetTURNServerCertificateRequired(argObject: {required: boolean}):Promise<boolean>;
			SetViewAnimationSpeed(argObject: {viewId: string, speedPercentage: number}):Promise<boolean>;
			SetViewBackgroundColor(argObject: {viewId: string, red: number, green: number, blue: number}):Promise<boolean>;
			ShowAudioMeters(argObject: {viewId: string, showMeters: boolean}):Promise<boolean>;
			ShowPreview(argObject: {preview: boolean}):Promise<boolean>;
			ShowViewAt(argObject: {viewId: string, x: number, y: number, width: number, height: number}):Promise<boolean>;
			ShowViewAtPoints(argObject: {viewId: string, x: number, y: number, width: number, height: number}):Promise<boolean>;
			ShowViewLabel(argObject: {viewId: string, showLabel: boolean}):Promise<boolean>;
			ShowWindowSharePreview(argObject: {preview: boolean}):Promise<boolean>;
			StartLocalCameraDetection():Promise<boolean>;
			StartLocalMicrophoneDetection():Promise<boolean>;
			StartLocalMonitorDetection():Promise<boolean>;
			StartLocalSpeakerDetection():Promise<boolean>;
			StartLocalWindowShareDetection():Promise<boolean>;
			StartLocationDetection():Promise<boolean>;
			StopLocalCameraDetection():Promise<any>;
			StopLocalMicrophoneDetection():Promise<any>;
			StopLocalMonitorDetection():Promise<any>;
			StopLocalSpeakerDetection():Promise<any>;
			StopLocalWindowShareDetection():Promise<any>;
			StopLocationDetection():Promise<any>;
			UnregisterLocalCameraEventListener():Promise<boolean>;
			UnregisterLocalCameraFrameListener(argObject: {localCamera: VidyoLocalCamera}):Promise<boolean>;
			UnregisterLocalMicrophoneEnergyListener():Promise<boolean>;
			UnregisterLocalMicrophoneEventListener():Promise<boolean>;
			UnregisterLocalMicrophoneFrameListener(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<boolean>;
			UnregisterLocalMonitorEventListener():Promise<boolean>;
			UnregisterLocalMonitorFrameListener(argObject: {localMonitor: VidyoLocalMonitor}):Promise<boolean>;
			UnregisterLocalRendererEventListener():Promise<boolean>;
			UnregisterLocalSpeakerEventListener():Promise<boolean>;
			UnregisterLocalWindowShareEventListener():Promise<boolean>;
			UnregisterLocalWindowShareFrameListener(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<boolean>;
			UnregisterLogEventListener():Promise<boolean>;
			UnregisterNetworkInterfaceEventListener():Promise<boolean>;
			UnregisterRemoteCameraEventListener():Promise<boolean>;
			UnregisterRemoteCameraFrameListener(argObject: {remoteCamera: VidyoRemoteCamera}):Promise<boolean>;
			UnregisterRemoteMicrophoneEnergyListener():Promise<boolean>;
			UnregisterRemoteMicrophoneEventListener():Promise<boolean>;
			UnregisterRemoteMicrophoneFrameListener(argObject: {remoteMicrophone: VidyoRemoteMicrophone}):Promise<boolean>;
			UnregisterRemoteRendererEventListener():Promise<boolean>;
			UnregisterRemoteSpeakerEventListener():Promise<boolean>;
			UnregisterRemoteWindowShareEventListener():Promise<boolean>;
			UnregisterRemoteWindowShareFrameListener(argObject: {remoteWindowShare: VidyoRemoteWindowShare}):Promise<boolean>;
			ValidateLicenseKey(argObject: {licenseKey: string, userName: string}):Promise<boolean>;
			VirtualWindowShareSelectAdvanced(argObject: {virtualWindowShare: VidyoVirtualWindowShare}):Promise<any>;
			VirtualWindowShareUnselectAdvanced(argObject: {virtualWindowShare: VidyoVirtualWindowShare}):Promise<any>;
		}
		export class VidyoLogRecord {

			categoryName: number;
			eventTime: number;
			file: string;
			functionName: string;
			level: string;
			line: number;
			message: string;
			name: string;
			threadName: string;
		}
		export class VidyoLoggerCategory {

			description: string;
			levels: string[];
			name: string;
		}
		export class VidyoParticipant {

			id: string;
			name: string;
			trust: string;
			userId: string;
			Destruct(): void;
			GetContact(argObject: {contact: VidyoContact}):Promise<VidyoContact>;
			GetId():Promise<string>;
			GetName():Promise<string>;
			GetTrust():Promise<string>;
			GetUserId():Promise<string>;
			IsHidden():Promise<boolean>;
			IsLocal():Promise<boolean>;
			IsRecording():Promise<boolean>;
			IsSelectable():Promise<boolean>;
		}
		export class VidyoProperty {

			name: string;
			value: string;
		}
		export class VidyoRoom {

			id: string;
			type: string;
			Destruct(): void;
			AcceptIncoming(argObject: {onIncomingEntered: VidyoRoomOnIncomingEntered, onIncomingExited: VidyoRoomOnIncomingExited}):Promise<boolean>;
			AcquireMediaRoute(argObject: {onMediaRouteAcquired: VidyoRoomOnMediaRouteAcquired, onMediaRouteAcquireFailed: VidyoRoomOnMediaRouteAcquireFailed}):Promise<boolean>;
			AddLocalCamera(argObject: {localCamera: VidyoLocalCamera, removeOthers: boolean}):Promise<any>;
			AddLocalMicrophone(argObject: {localMicrophone: VidyoLocalMicrophone, removeOthers: boolean, isAES: boolean}):Promise<any>;
			AddLocalMonitor(argObject: {localMonitor: VidyoLocalMonitor, removeOthers: boolean}):Promise<any>;
			AddLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer, removeOthers: boolean}):Promise<any>;
			AddLocalSpeaker(argObject: {localSpeaker: VidyoLocalSpeaker, removeOthers: boolean, isAES: boolean}):Promise<any>;
			AddLocalWindowShare(argObject: {localWindowShare: VidyoLocalWindowShare, removeOthers: boolean}):Promise<any>;
			AddVirtualWindowShare(argObject: {virtualWindowShare: VidyoVirtualWindowShare, removeOthers: boolean}):Promise<any>;
			BootAllParticipants(argObject: {reason: string}):Promise<boolean>;
			BootParticipant(argObject: {userId: string, reason: string}):Promise<boolean>;
			CancelInvite(argObject: {inviteeId: string}):Promise<boolean>;
			Delete(argObject: {onDeleteResult: VidyoRoomOnDeleteResult}):Promise<any>;
			DisableMedia():Promise<boolean>;
			EnableMedia(argObject: {onMediaEnabled: VidyoRoomOnMediaEnabled, onMediaFailed: VidyoRoomOnMediaFailed, onMediaDisabled: VidyoRoomOnMediaDisabled}):Promise<boolean>;
			Enter(argObject: {password: string, onEntered: VidyoRoomOnEntered, onExited: VidyoRoomOnExited}):Promise<boolean>;
			GetHistory(argObject: {numMessages: number, onGetHistoryResults: VidyoRoomOnGetHistoryResults}):Promise<boolean>;
			GetHistoryById(argObject: {messageId: number, numMessagesBefore: number, numMessagesAfter: number, onGetHistoryResults: VidyoRoomOnGetHistoryResults}):Promise<boolean>;
			GetHistoryByTime(argObject: {time: number, numMessagesBefore: number, numMessagesAfter: number, onGetHistoryResults: VidyoRoomOnGetHistoryResults}):Promise<boolean>;
			GetId():Promise<string>;
			GetRoomProperties(argObject: {onGetRoomPropertiesResult: VidyoRoomOnGetRoomPropertiesResult}):Promise<boolean>;
			GetSelectedLocalCameras(argObject: {cameras: VidyoLocalCamera[]}):Promise<any>;
			GetSelectedLocalMicrophones(argObject: {mics: VidyoLocalMicrophone[]}):Promise<any>;
			GetSelectedLocalMonitors(argObject: {monitors: VidyoLocalMonitor[]}):Promise<any>;
			GetSelectedLocalRenderers(argObject: {renderers: VidyoLocalRenderer[]}):Promise<any>;
			GetSelectedLocalSpeakers(argObject: {speakers: VidyoLocalSpeaker[]}):Promise<any>;
			GetSelectedLocalWindowShares(argObject: {windowShares: VidyoLocalWindowShare[]}):Promise<any>;
			GetStats(argObject: {stats: VidyoRoomStats}):Promise<boolean>;
			GetType():Promise<string>;
			GetUser():Promise<VidyoUser>;
			HideStatisticsDialog():Promise<any>;
			Invite(argObject: {userId: string, message: string, onInviteResult: VidyoRoomOnInviteResult}):Promise<boolean>;
			InviteAll(argObject: {message: string, onInviteResult: VidyoRoomOnInviteResult}):Promise<boolean>;
			InviteN(argObject: {userIds: string[], message: string, onInviteResult: VidyoRoomOnInviteResult}):Promise<boolean>;
			Leave():Promise<boolean>;
			MessageSearch(argObject: {searchText: string, index: number, pageSize: number, onMessageSearchResults: VidyoRoomOnMessageSearchResults}):Promise<boolean>;
			RegisterMessageEventListener(argObject: {onMessageReceived: VidyoRoomOnMessageReceived, onMessageAcknowledged: VidyoRoomOnMessageAcknowledged, onMessageRead: VidyoRoomOnMessageRead, onMessageTypingIndication: VidyoRoomOnMessageTypingIndication}):Promise<boolean>;
			RegisterParticipantEventListener(argObject: {onParticipantJoined: VidyoRoomOnParticipantJoined, onParticipantLeft: VidyoRoomOnParticipantLeft, onDynamicParticipantChanged: VidyoRoomOnDynamicParticipantChanged, onLoudestParticipantChanged: VidyoRoomOnLoudestParticipantChanged}):Promise<boolean>;
			RegisterPipEventListener(argObject: {onPipLocationChanged: VidyoRoomOnPipLocationChanged}):Promise<boolean>;
			RegisterRecorderInCallEventListener(argObject: {onRecorderInCallChanged: VidyoRoomRecorderInCall}):Promise<boolean>;
			RegisterResourceManagerEventListener(argObject: {onAvailableResourcesChanged: VidyoRoomOnAvailableResourcesChanged, onMaxRemoteSourcesChanged: VidyoRoomOnMaxRemoteSourcesChanged}):Promise<boolean>;
			RegisterRoomPropertiesEventListener(argObject: {onRoomPropertiesChanged: VidyoRoomOnRoomPropertiesChanged}):Promise<boolean>;
			RegisterSubjectEventListener(argObject: {onSetSubject: VidyoRoomOnSetSubject}):Promise<boolean>;
			RegisterUnprocessedAudioEventListener(argObject: {onUnprocessedAudioSupportChanged: VidyoRoomOnUnprocessedAudioSupportChanged, onUnprocessedAudioStarted: VidyoRoomOnUnprocessedAudioStarted}):Promise<boolean>;
			RejectIncoming():Promise<boolean>;
			RemoveLocalCamera(argObject: {localCamera: VidyoLocalCamera}):Promise<any>;
			RemoveLocalMicrophone(argObject: {localMicrophone: VidyoLocalMicrophone}):Promise<any>;
			RemoveLocalMonitor(argObject: {localMonitor: VidyoLocalMonitor}):Promise<any>;
			RemoveLocalRenderer(argObject: {localRenderer: VidyoLocalRenderer}):Promise<any>;
			RemoveLocalSpeaker(argObject: {localSpeaker: VidyoLocalSpeaker}):Promise<any>;
			RemoveLocalWindowShare(argObject: {localWindowShare: VidyoLocalWindowShare}):Promise<any>;
			RemoveVirtualWindowShare(argObject: {virtualWindowShare: VidyoVirtualWindowShare}):Promise<any>;
			ReportLocalParticipantOnJoined(argObject: {reportLocalParticipant: boolean}):Promise<boolean>;
			RequestRoleChange(argObject: {newRole: string, auth: VidyoRoleAuthentication, onRequestRoleChangeResult: VidyoRoomOnRequestRoleChangeResult, requestId: string}):Promise<boolean>;
			ResizeStatisticsDialog(argObject: {width: number, height: number}):Promise<any>;
			SendMessage(argObject: {message: string}):Promise<boolean>;
			SendMessageAcknowledged(argObject: {messageId: number}):Promise<boolean>;
			SendMessageTypingIndication(argObject: {typingIndication: string}):Promise<boolean>;
			SetDynamicGenerationPosition(argObject: {generation: number, x: number, y: number, width: number, height: number, frameInterval: number}):Promise<boolean>;
			SetDynamicLocalRenderer(argObject: {renderer: VidyoLocalRenderer}):Promise<boolean>;
			SetFavorite(argObject: {isFavorite: boolean, onSetFavoriteResult: VidyoRoomOnSetFavoriteResult}):Promise<any>;
			SetMaxAudioSources(argObject: {count: number}):Promise<boolean>;
			SetMaxBitRate(argObject: {bitRate: number}):Promise<any>;
			SetMaxVideoSources(argObject: {count: number}):Promise<boolean>;
			SetRoomProperties(argObject: {roomProperties: VidyoRoomProperties, onSetRoomPropertiesResult: VidyoRoomOnSetRoomPropertiesResult}):Promise<boolean>;
			SetSubject(argObject: {subject: string}):Promise<boolean>;
			ShowStatisticsDialog():Promise<any>;
			UnregisterMessageEventListener():Promise<boolean>;
			UnregisterParticipantEventListener():Promise<boolean>;
			UnregisterPipEventListener():Promise<boolean>;
			UnregisterRecorderInCallEventListener():Promise<boolean>;
			UnregisterResourceManagerEventListener():Promise<boolean>;
			UnregisterRoomPropertiesEventListener():Promise<boolean>;
			UnregisterSubjectEventListener():Promise<boolean>;
			UnregisterUnprocessedAudioEventListener():Promise<boolean>;
		}
		export class VidyoGenerationDiff {

			newIndex: number;
			oldIndex: number;
			participant: VidyoParticipant;
		}
		export class VidyoRoleAuthentication {

			hasPassCode: boolean;
			passCode: string;
		}
		export class VidyoRoomProperties {

			administrators: string[];
			calendarInviteBody: string;
			calendarInviteHTMLBody: string;
			calendarInviteSubject: string;
			creationTime: number;
			defaultProfile: VidyoRoomParticipantProfile;
			description: string;
			designatedPresenter: string;
			hasCalendarInviteText: boolean;
			hasPassword: boolean;
			isBroadcastingEnabled: boolean;
			isLoggingEnabled: boolean;
			isLoggingPaused: boolean;
			isLoggingSupported: boolean;
			isMembersOnly: boolean;
			isModerated: boolean;
			isPasswordProtected: boolean;
			isPublic: boolean;
			isSecure: boolean;
			isWaitingRoomEnabled: boolean;
			language: string;
			loggingLocation: string;
			maxParticipants: number;
			members: string[];
			moderatorUrl: string;
			moderators: string[];
			name: string;
			outcasts: string[];
			owners: string[];
			participantProfiles: VidyoRoomParticipantProfile[];
			password: string;
			schedule: VidyoEventSchedule;
			webLink: string;
		}
		export class VidyoRoomParticipantProfile {

			camera: string;
			chat: string;
			microphone: string;
			userId: string;
			windowShare: string;
		}
		export class VidyoRoomInfo {

			creationTime: number;
			description: string;
			extension: string;
			id: string;
			isFavorite: boolean;
			isMembersOnly: boolean;
			isPasswordProtected: boolean;
			isPublic: boolean;
			language: string;
			maxParticipants: number;
			messageList: VidyoChatMessage[];
			name: string;
			numUsers: number;
			ownerList: string[];
			type: string;
			userList: string[];
		}
		export class VidyoUser {

			constructor(endpoint: VidyoEndpoint);
			Destruct(): void;
			AddRosterContact(argObject: {userId: string}):Promise<boolean>;
			AdvancedSearchRooms(argObject: {fieldSet: string[], fieldRelations: string[], fieldValues: string[], searchToken: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			AdvancedSearchUsers(argObject: {fieldSet: string[], fieldValues: string[], searchToken: string, index: number, pageSize: number, onUserSearchResults: VidyoUserOnUserSearchResults}):Promise<boolean>;
			AllowSubscriber(argObject: {userId: string}):Promise<boolean>;
			BlockSubscriber(argObject: {userId: string}):Promise<boolean>;
			CreateCall(argObject: {userId: string, createToken: string, onCallCreated: VidyoUserOnCallCreated}):Promise<boolean>;
			CreateRoomFromId(argObject: {id: string, createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			CreateRoomFromKey(argObject: {roomKey: string, createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			CreateRoomWithId(argObject: {id: string, createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			CreateScheduledRoom(argObject: {schedule: VidyoEventSchedule, createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			CreateTestCallRoom(argObject: {createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			CreateTopicRoom(argObject: {name: string, description: string, createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			GetAuthTypes(argObject: {host: string, port: number, serviceType: string, onAuthTypes: VidyoUserOnAuthTypes, onWebProxyCredentialsRequest: VidyoUserOnAuthTypesWebProxyCredentialsRequest}):Promise<boolean>;
			GetContact(argObject: {userId: string, onGetContactResult: VidyoUserOnGetContactResult}):Promise<boolean>;
			GetConversationRoom(argObject: {userIds: string[], createToken: string, onRoomCreated: VidyoUserOnRoomCreated}):Promise<boolean>;
			GetCurrentRoster(argObject: {roster: VidyoContact[]}):Promise<boolean>;
			GetEndpoint():Promise<VidyoEndpoint>;
			GetFavoriteRooms(argObject: {index: number, pageSize: number, onFavoriteRoomResults: VidyoUserOnFavoriteRoomResults}):Promise<boolean>;
			GetId():Promise<string>;
			GetPasswordResetUrl(argObject: {onPasswordResetUrl: VidyoUserOnPasswordResetUrl}):Promise<boolean>;
			GetRecentRooms(argObject: {index: number, pageSize: number, onRecentRoomResults: VidyoUserOnRecentRoomResults}):Promise<boolean>;
			GetStats(argObject: {stats: VidyoUserStats}):Promise<boolean>;
			GetWebProxyAddress():Promise<string>;
			InvalidateTokenOnLogout(argObject: {invalidate: boolean}):Promise<boolean>;
			Login(argObject: {username: string, password: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			LoginAsGuest(argObject: {displayName: string, roomKey: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			LoginWithAccessToken(argObject: {accessToken: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			LoginWithCAC(argObject: {certificate: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			LoginWithRefreshToken(argObject: {refreshToken: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			LoginWithSAML(argObject: {key: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			LoginWithTenantToken(argObject: {provisionToken: string, host: string, port: number, serviceType: string, onLoginComplete: VidyoUserOnLoginComplete, onLoggedOut: VidyoUserOnLoggedOut, onConnectionStatusChanged: VidyoUserOnConnectionStatusChanged, onTokenReceived: VidyoUserOnTokenReceived, onWebProxyCredentialsRequest: VidyoUserOnWebProxyCredentialsRequest}):Promise<boolean>;
			Logout():Promise<boolean>;
			PauseUpdateNotification(argObject: {pauseUpdateNotification: boolean}):Promise<boolean>;
			RegisterCallEventListener(argObject: {onCallCreatedByInvite: VidyoUserOnCallCreatedByInvite}):Promise<boolean>;
			RegisterContactEventListener(argObject: {onUpdateSelf: VidyoUserOnUpdateSelf, onUpdateRosterContact: VidyoUserOnUpdateRosterContact, onRemoveRosterContact: VidyoUserOnRemoveRosterContact}):Promise<boolean>;
			RegisterLicenseEventListener(argObject: {onLicenseReceived: VidyoUserOnLicenseReceived, onGetLicenseKey: VidyoUserOnGetLicenseKey}):Promise<boolean>;
			RegisterRoomEventListener(argObject: {onRoomCreatedByInvite: VidyoUserOnRoomCreatedByInvite, onRoomInviteCancelled: VidyoUserOnRoomInviteCancelled}):Promise<boolean>;
			RemoveRosterContact(argObject: {userId: string}):Promise<boolean>;
			SearchConversationRooms(argObject: {searchText: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			SearchRooms(argObject: {searchText: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			SearchRoomsWithName(argObject: {searchText: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			SearchRoomsWithOwner(argObject: {searchText: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			SearchRoomsWithSubject(argObject: {searchText: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			SearchTopicRooms(argObject: {searchText: string, index: number, pageSize: number, onRoomSearchResults: VidyoUserOnRoomSearchResults}):Promise<boolean>;
			SearchUsers(argObject: {searchText: string, index: number, pageSize: number, onUserSearchResults: VidyoUserOnUserSearchResults}):Promise<boolean>;
			SetCA(argObject: {ca: string, caFilePath: string, caDir: string}):Promise<any>;
			SetDisplayName(argObject: {displayName: string}):Promise<boolean>;
			SetTCPTransport(argObject: {enable: boolean}):Promise<any>;
			SetUDPTransport(argObject: {enable: boolean}):Promise<any>;
			SetWebProxyAddressCredentials(argObject: {proxyAddress: string, username: string, password: string}):Promise<any>;
			SetWebProxyTransport(argObject: {enable: boolean}):Promise<any>;
			UnregisterCallEventListener():Promise<boolean>;
			UnregisterContactEventListener():Promise<boolean>;
			UnregisterLicenseEventListener():Promise<boolean>;
			UnregisterRoomEventListener():Promise<boolean>;
			UpdatePresence(argObject: {state: string, status: string}):Promise<boolean>;
		}
		export class VidyoTenantCapabilities {

			LoginAttemptInfo: VidyoUserLoginInfo[];
			WSGMicroserviceAddress: string;
			changePasswordUrl: string;
			endpointBehavior: VidyoProperty[];
			isCreatePublicRoomEnabled: boolean;
			isGuestEnabled: boolean;
			isLoginBannerEnabled: boolean;
			isOpusAudioEnabled: boolean;
			isPersonalRoomEnabled: boolean;
			isPublicChatEnabled: boolean;
			isRoomModerationEnabled: boolean;
			isScheduledRoomEnabled: boolean;
			isSdk220Enabled: boolean;
			isTestCallEnabled: boolean;
			isTytoCareEnabled: boolean;
			isWSGMicroserviceEnabled: boolean;
			isWelcomeBannerEnabled: boolean;
			loginBannerData: string;
			maximumRoomPinLength: number;
			minimumRoomPinLength: number;
			welcomeBannerData: string;
		}
		export class VidyoUserAuthenticationInfo {

			authType: string;
			property: VidyoProperty;
		}
		export class VidyoUserLoginInfo {

			result: string;
			sourceIp: string;
			timestamp: string;
		}
		export class VidyoVideoPlane {

			buffer: number;
			height: number;
			offset: number;
			pitch: number;
			size: number;
			width: number;
		}
		export class VidyoMeeting {

			body: string;
			endDateTime: string;
			id: string;
			isVidyoMeeting: boolean;
			location: string;
			numberOfAttendees: number;
			ownerEmail: string;
			ownerName: string;
			startDateTime: string;
			subject: string;
			vidyoMeetingRoomLink: string;
			Destruct(): void;
			GetAttendees(argObject: {index: number, pageSize: number}):Promise<boolean>;
			GetBody():Promise<string>;
			GetEndDateTime():Promise<string>;
			GetId():Promise<string>;
			GetIsVidyoMeeting():Promise<boolean>;
			GetLocation():Promise<string>;
			GetNumberOfAttendees():Promise<number>;
			GetOwnerEmail():Promise<string>;
			GetOwnerName():Promise<string>;
			GetStartDateTime():Promise<string>;
			GetSubject():Promise<string>;
			GetVidyoMeetingRoomLink():Promise<string>;
			RetrieveBody():Promise<string>;
		}
		export class VidyoMeetingInfo {

			attendees: VidyoMeetingAttendee[];
			body: string;
			endDateTime: string;
			id: string;
			isVidyoMeeting: boolean;
			location: string;
			numOfAttendees: number;
			ownerEmail: string;
			ownerName: string;
			startDateTime: string;
			subject: string;
			totalBodyLength: number;
			vidyoMeetingRoomLink: string;
		}
		export class VidyoBandwidthSummaryStats {

			actualEncoderBitRate: number;
			availableBandwidth: number;
			leakyBucketDelay: number;
			retransmitBitRate: number;
			targetEncoderBitRate: number;
			totalTransmitBitRate: number;
		}
		export class VidyoEndpointStats {

			applicationTag: string;
			buildTag: string;
			bytesReceivedTcp: number;
			bytesReceivedUdp: number;
			bytesSentTcp: number;
			bytesSentUdp: number;
			connectTime: string;
			id: string;
			libraryVersion: string;
			localCameraStats: VidyoLocalVideoSourceStats[];
			localMicrophoneStats: VidyoLocalMicrophoneStats[];
			localMonitorStats: VidyoLocalVideoSourceStats[];
			localRendererStats: VidyoLocalRendererStats[];
			localSpeakerStats: VidyoLocalSpeakerStats[];
			localWindowShareStats: VidyoLocalVideoSourceStats[];
			logStats: VidyoLogStats;
			loginTimeConsumedMs: number;
			maxBitRate: number;
			maxEncodePixelRateInitial: number;
			mediaEnableTimeConsumedMs: number;
			mediaRouteAcquireTimeConsumedMs: number;
			networkInterfaceStats: VidyoNetworkInterfaceStats[];
			osName: string;
			osVersion: string;
			processorBrand: string;
			processorLogicalCores: number;
			processorModel: string;
			processorPhysicalCores: number;
			processorSpeed: number;
			roomEnterTimeConsumedMs: number;
			timeStamp: string;
			userStats: VidyoUserStats[];
			virtualWindowShareStats: VidyoLocalVideoSourceStats[];
		}
		export class VidyoLatencyTestDataStats {

			address: string;
			latencyMs: number;
			latitude: number;
			longitude: number;
			name: string;
			responseReceived: boolean;
		}
		export class VidyoLatencyTestStats {

			latencyTestDataStats: VidyoLatencyTestDataStats[];
		}
		export class VidyoLocalMicrophoneStats {

			aecEchoCoupling: number;
			agcAverageGain: number;
			bitsPerSample: number;
			format: string;
			id: string;
			localSpeakerStreams: VidyoLocalSpeakerStreamStats[];
			name: string;
			noiseSuppressionSnr: number;
			numberOfChannels: number;
			remoteSpeakerStreams: VidyoRemoteSpeakerStreamStats[];
			sampleRateMeasured: number;
			sampleRateSet: number;
		}
		export class VidyoLocalRendererStats {

			format: string;
			frameIntervalMeasured: number;
			frameIntervalSet: number;
			height: number;
			id: string;
			name: string;
			totalFrames: number;
			totalPixels: number;
			width: number;
		}
		export class VidyoLocalRendererStreamStats {

			bufferDropped: number;
			bufferSize: number;
			height: number;
			id: string;
			name: string;
			width: number;
		}
		export class VidyoLocalSpeakerStats {

			bitsPerSample: number;
			format: string;
			id: string;
			name: string;
			numberOfChannels: number;
			sampleRateMeasured: number;
			sampleRateSet: number;
		}
		export class VidyoLocalSpeakerStreamStats {

			bitsPerSample: number;
			delay: number;
			format: string;
			highThreshold: number;
			highestThreshold: number;
			isActive: boolean;
			lastEnergy: number;
			lastPlayed: number;
			lowThreshold: number;
			lowestThreshold: number;
			maxThreshold: number;
			name: string;
			numberOfChannels: number;
			overrun: number;
			played: number;
			sampleRate: number;
			underrun: number;
		}
		export class VidyoLocalVideoSourceStats {

			format: string;
			frameIntervalMeasured: number;
			frameIntervalSet: number;
			height: number;
			id: string;
			localRendererStreams: VidyoLocalRendererStreamStats[];
			name: string;
			remoteRendererStreams: VidyoRemoteRendererStreamStats[];
			targetBitRate: number;
			totalFrames: number;
			width: number;
		}
		export class VidyoLogDataStats {

			name: string;
			occurances: number;
		}
		export class VidyoLogStats {

			logErrorDataStats: VidyoLogDataStats[];
			logWarningDataStats: VidyoLogDataStats[];
		}
		export class VidyoMediaConnectionTransportInfo {

			addressType: string;
			componentType: string;
			connectionId: number;
			connectionType: string;
			externalLocalAddr: string;
			externalRemoteAddr: string;
			interfaceName: string;
			interfaceType: string;
			internalLocalAddr: string;
			internalRemoteAddr: string;
			transportPlugIn: string;
		}
		export class VidyoNetworkInterfaceStats {

			isUp: boolean;
			name: string;
			type: string;
		}
		export class VidyoParticipantGenerationStats {

			cameraId: string;
			cameraName: string;
			enabled: boolean;
			frameInterval: number;
			height: number;
			id: string;
			name: string;
			pixelRate: number;
			width: number;
		}
		export class VidyoParticipantStats {

			id: string;
			name: string;
			remoteCameraStats: VidyoRemoteVideoSourceStats[];
			remoteMicrophoneStats: VidyoRemoteMicrophoneStats[];
			remoteWindowShareStats: VidyoRemoteVideoSourceStats[];
			userId: string;
		}
		export class VidyoRateShaperStats {

			delayNormal: number;
			delayRetransmit: number;
			dropNormal: number;
			packetsNormal: number;
			packetsRetransmit: number;
		}
		export class VidyoRemoteMicrophoneStats {

			bitsPerSample: number;
			codecDtx: number;
			codecName: string;
			codecQualitySetting: number;
			id: string;
			lastFrameMs: number;
			localSpeakerStreams: VidyoLocalSpeakerStreamStats[];
			name: string;
			numberOfChannels: number;
			receiveNetworkBitRate: number;
			receiveNetworkDelay: number;
			receiveNetworkDroppedPackets: number;
			receiveNetworkJitter: number;
			receiveNetworkPacketsConcealed: number;
			receiveNetworkPacketsLost: number;
			sampleRateMeasured: number;
			sampleRateSet: number;
		}
		export class VidyoRemoteRendererStreamStats {

			codecFir: number;
			codecIFrames: number;
			codecLayers: number;
			codecNacks: number;
			codecName: string;
			fps: number;
			fpsInput: number;
			fpsSent: number;
			framesDropped: number;
			height: number;
			lastHeight: number;
			lastWidth: number;
			name: string;
			sendNetworkBitRate: number;
			sendNetworkRtt: number;
			width: number;
		}
		export class VidyoRemoteSpeakerStreamStats {

			bitsPerSample: number;
			codecDtx: number;
			codecName: string;
			codecQualitySetting: number;
			name: string;
			numberOfChannels: number;
			sampleRate: number;
			sendNetworkBitRate: number;
			sendNetworkRtt: number;
		}
		export class VidyoRemoteVideoSourceStats {

			codecFir: number;
			codecIFrames: number;
			codecLayers: number;
			codecNacks: number;
			codecName: string;
			fpsDecoded: number;
			fpsDecoderInput: number;
			fpsRendered: number;
			height: number;
			id: string;
			lastFrameMs: number;
			localRendererStreams: VidyoLocalRendererStreamStats[];
			maxStreamFrameRate: number;
			maxStreamHeight: number;
			maxStreamWidth: number;
			name: string;
			receiveNetworkBitRate: number;
			receiveNetworkPacketsConcealed: number;
			receiveNetworkPacketsLost: number;
			receiveNetworkPacketsReordered: number;
			receiveNetworkRecoveredWithFec: number;
			showFrameRate: number;
			showHeight: number;
			showPixelRate: number;
			showState: string;
			showWidth: number;
			videoDeltaFromAudioMs: number;
			width: number;
		}
		export class VidyoRoomStats {

			availableDecodeBwPercent: number;
			availableDecodeCpuPercent: number;
			availableEncodeBwPercent: number;
			availableEncodeCpuPercent: number;
			bandwidthApp: VidyoBandwidthSummaryStats;
			bandwidthAudio: VidyoBandwidthSummaryStats;
			bandwidthVideo: VidyoBandwidthSummaryStats;
			callId: string;
			conferenceId: string;
			cpuUsage: number;
			currentBandwidthDecodePixelRate: number;
			currentBandwidthEncodePixelRate: number;
			currentCpuDecodePixelRate: number;
			currentCpuEncodePixelRate: number;
			id: string;
			maxDecodePixelRate: number;
			maxEncodePixelRate: number;
			maxVideoSources: number;
			participantGenerationStats: VidyoParticipantGenerationStats[];
			participantStats: VidyoParticipantStats[];
			rateShaperApp: VidyoRateShaperStats;
			rateShaperAudio: VidyoRateShaperStats;
			rateShaperVideo: VidyoRateShaperStats;
			receiveBitRateAvailable: number;
			receiveBitRateTotal: number;
			reflectorId: string;
			sendBitRateAvailable: number;
			sendBitRateTotal: number;
			staticSources: number;
			transportInformation: VidyoMediaConnectionTransportInfo[];
		}
		export class VidyoUserStats {

			host: string;
			id: string;
			latencyTestStats: VidyoLatencyTestStats;
			port: number;
			roomStats: VidyoRoomStats[];
			serviceType: string;
		}
		export class VidyoCalendarConnProps {

			propType: string;
			propValue: string;
		}
		export class VidyoEventSchedule {

			byDay: string;
			byMonth: string;
			byMonthDay: string;
			bySetPos: string;
			byWeekNum: string;
			byYearDay: string;
			count: string;
			duration: string;
			endTime: string;
			eventId: string;
			frequency: string;
			interval: string;
			startTime: string;
			until: string;
			weekStartDay: string;
		}
		export class VidyoMeetingAttendee {

			email: string;
			name: string;
			role: string;
			status: string;
		}
		export class VidyoNetworkInterface {

			address: string;
			family: string;
			name: string;
			state: string;
			type: string;
			Destruct(): void;
			GetAddress():Promise<string>;
			GetFamily():Promise<string>;
			GetName():Promise<string>;
			GetState():Promise<string>;
			GetType():Promise<string>;
		}
	}
	export class VidyoClient {
		constructor(plginDivId: string, onStatus: onStatusCallback);

		CreateVidyoCalendarManager(argObject: { feedback: VidyoClient.VidyoCalendarManagerFeedback}):Promise<VidyoClient.VidyoCalendarManager>;
		CreateVidyoCalendarManagerFeedback(argObject: { calendarCreated: VidyoClient.VidyoCalendarManagerFeedbackCalendarCreated, calendarDestroyed: VidyoClient.VidyoCalendarManagerFeedbackCalendarDestroyed}):Promise<VidyoClient.VidyoCalendarManagerFeedback>;
		CreateVidyoCalendarFeedback(argObject: { connectState: VidyoClient.VidyoCalendarFeedbackConnectResult, disconnected: VidyoClient.VidyoCalendarFeedbackDisconnected, capabilities: VidyoClient.VidyoCalendarFeedbackGetCapabilitiesResult, meetingReminder: VidyoClient.VidyoCalendarFeedbackMeetingReminder, meetingCreatedById: VidyoClient.VidyoCalendarFeedbackMeetingCreatedById, meetingCreatedByService: VidyoClient.VidyoCalendarFeedbackMeetingCreatedByService, meetingUpdatedByService: VidyoClient.VidyoCalendarFeedbackMeetingUpdatedByService, meetingRemovedByService: VidyoClient.VidyoCalendarFeedbackMeetingRemovedByService, getMeetingResults: VidyoClient.VidyoCalendarFeedbackGetMeetingsResult, seriesUpdate: VidyoClient.VidyoCalendarFeedbackSeriesUpdate}):Promise<VidyoClient.VidyoCalendarFeedback>;
		CreateVidyoConnector(argObject: { viewId: string, viewStyle: string, remoteParticipants: number, logFileFilter: string, logFileName: string, userData: number}):Promise<VidyoClient.VidyoConnector>;
		CreateVidyoVideoFrame(argObject: { format: string, buffer: number, size: number, releaseCallback: VidyoClient.VidyoVideoFrameReleaseCallback, width: number, height: number}):Promise<VidyoClient.VidyoVideoFrame>;
		CreateVidyoVirtualWindowShare(argObject: { id: string, windowName: string, applicationName: string, onStart: VidyoClient.VidyoVirtualWindowShareStartCallback, onReconfigure: VidyoClient.VidyoVirtualWindowShareReconfigureCallback, onStop: VidyoClient.VidyoVirtualWindowShareStopCallback}):Promise<VidyoClient.VidyoVirtualWindowShare>;
		CreateVidyoApplication(argObject: { endpoint: VidyoClient.VidyoEndpoint}):Promise<VidyoClient.VidyoApplication>;
		CreateVidyoEndpoint(argObject: { viewId: string, viewStyle: string, remoteParticipants: number, consoleLogFilter: string, logFileFilter: string, logFileName: string}):Promise<VidyoClient.VidyoEndpoint>;
		CreateVidyoUser(argObject: { endpoint: VidyoClient.VidyoEndpoint}):Promise<VidyoClient.VidyoUser>;
		CreateVidyoMeetingFeedback(argObject: { getAttendeeResults: VidyoClient.VidyoMeetingFeedbackGetMeetingAttendeeResults}):Promise<VidyoClient.VidyoMeetingFeedback>;
	}
}
